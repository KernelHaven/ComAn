2003-06-11 21:55:00 +0000
diff --git a/payloads/libpayload/drivers/Makefile.inc b/payloads/libpayload/drivers/Makefile.inc
index 75f08f2..899c5d2 100644
--- a/payloads/libpayload/drivers/Makefile.inc
+++ b/payloads/libpayload/drivers/Makefile.inc
@@ -1,119 +1,120 @@
 ##
 ## This file is part of the libpayload project.
 ##
 ## Copyright (C) 2007 Uwe Hermann <uwe@hermann-uwe.de>
 ## Copyright (C) 2008 Advanced Micro Devices, Inc.
 ## Copyright (C) 2008 coresystems GmbH
 ##
 ## Redistribution and use in source and binary forms, with or without
 ## modification, are permitted provided that the following conditions
 ## are met:
 ## 1. Redistributions of source code must retain the above copyright
 ##    notice, this list of conditions and the following disclaimer.
 ## 2. Redistributions in binary form must reproduce the above copyright
 ##    notice, this list of conditions and the following disclaimer in the
 ##    documentation and/or other materials provided with the distribution.
 ## 3. The name of the author may not be used to endorse or promote products
 ##    derived from this software without specific prior written permission.
 ##
 ## THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 ## ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 ## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ## ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 ## FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 ## DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 ## OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 ## HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 ## LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 ## OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 ## SUCH DAMAGE.
 ##
 
 libc-$(CONFIG_LP_PCI) += pci.c
 
 libc-$(CONFIG_LP_SPEAKER) += speaker.c
 
 libc-$(CONFIG_LP_8250_SERIAL_CONSOLE) += serial/8250.c serial/serial.c
 libc-$(CONFIG_LP_S5P_SERIAL_CONSOLE) += serial/s5p.c serial/serial.c
 libc-$(CONFIG_LP_IPQ806X_SERIAL_CONSOLE) += serial/ipq806x.c serial/serial.c
 libc-$(CONFIG_LP_IPQ40XX_SERIAL_CONSOLE) += serial/ipq40xx.c serial/serial.c
 libc-$(CONFIG_LP_BG4CD_SERIAL_CONSOLE) += serial/bg4cd.c serial/serial.c
 libc-$(CONFIG_LP_PC_KEYBOARD) += keyboard.c
 
 libc-$(CONFIG_LP_CBMEM_CONSOLE) += cbmem_console.c
 
 libc-$(CONFIG_LP_NVRAM) += nvram.c
 libc-$(CONFIG_LP_NVRAM) += options.c
 
 # Timer drivers
 libc-$(CONFIG_LP_TIMER_MTK) += timer/mtk_timer.c
 libc-$(CONFIG_LP_TIMER_MCT) += timer/mct.c
 libc-$(CONFIG_LP_TIMER_RDTSC) += timer/rdtsc.c
 libc-$(CONFIG_LP_TIMER_TEGRA_1US) += timer/tegra_1us.c
 libc-$(CONFIG_LP_TIMER_IPQ806X) += timer/ipq806x.c
 libc-$(CONFIG_LP_TIMER_IPQ40XX) += timer/ipq40xx.c
 libc-$(CONFIG_LP_TIMER_RK) += timer/rktimer.c
 libc-$(CONFIG_LP_TIMER_BG4CD) += timer/bg4cd.c
 libc-$(CONFIG_LP_TIMER_IMG_PISTACHIO) += timer/img_pistachio.c
 libc-$(CONFIG_LP_TIMER_CYGNUS) += timer/cygnus.c
 libc-$(CONFIG_LP_TIMER_ARMADA38X) += timer/armada38x.c
+libc-$(CONFIG_LP_TIMER_MVMAP2315) += timer/mvmap2315.c
 
 # Video console drivers
 libc-$(CONFIG_LP_VIDEO_CONSOLE) += video/video.c
 libc-$(CONFIG_LP_VGA_VIDEO_CONSOLE) += video/vga.c
 
 # Geode LX console drivers
 libc-$(CONFIG_LP_GEODELX_VIDEO_CONSOLE) += video/geodelx.c
 libc-$(CONFIG_LP_GEODELX_VIDEO_CONSOLE) += video/font8x16.c
 
 # coreboot generic framebuffer driver
 libc-$(CONFIG_LP_COREBOOT_VIDEO_CONSOLE) += video/corebootfb.c
 libc-$(CONFIG_LP_COREBOOT_VIDEO_CONSOLE) += video/font8x16.c
 
 # cbgfx: coreboot graphics library
 libc-y += video/graphics.c
 
 # AHCI/ATAPI driver
 libc-$(CONFIG_LP_STORAGE) += storage/storage.c
 libc-$(CONFIG_LP_STORAGE_AHCI) += storage/ahci.c
 libc-$(CONFIG_LP_STORAGE_AHCI) += storage/ahci_common.c
 ifeq ($(CONFIG_LP_STORAGE_ATA),y)
 libc-$(CONFIG_LP_STORAGE_ATA) += storage/ata.c
 libc-$(CONFIG_LP_STORAGE_ATA) += storage/ahci_ata.c
 endif
 ifeq ($(CONFIG_LP_STORAGE_ATAPI),y)
 libc-$(CONFIG_LP_STORAGE_ATAPI) += storage/atapi.c
 libc-$(CONFIG_LP_STORAGE_ATAPI) += storage/ahci_atapi.c
 endif
 
 # USB stack
 libc-$(CONFIG_LP_USB) += usb/usbinit.c
 libc-$(CONFIG_LP_USB) += usb/usb.c
 libc-$(CONFIG_LP_USB) += usb/usb_dev.c
 libc-$(CONFIG_LP_USB) += usb/quirks.c
 libc-$(CONFIG_LP_USB_GEN_HUB) += usb/generic_hub.c
 libc-$(CONFIG_LP_USB_HUB) += usb/usbhub.c
 libc-$(CONFIG_LP_USB_UHCI) += usb/uhci.c
 libc-$(CONFIG_LP_USB_UHCI) += usb/uhci_rh.c
 libc-$(CONFIG_LP_USB_OHCI) += usb/ohci.c
 libc-$(CONFIG_LP_USB_OHCI) += usb/ohci_rh.c
 libc-$(CONFIG_LP_USB_EHCI) += usb/ehci.c
 libc-$(CONFIG_LP_USB_EHCI) += usb/ehci_rh.c
 libc-$(CONFIG_LP_USB_XHCI) += usb/xhci.c
 libc-$(CONFIG_LP_USB_XHCI) += usb/xhci_debug.c
 libc-$(CONFIG_LP_USB_XHCI) += usb/xhci_devconf.c
 libc-$(CONFIG_LP_USB_XHCI) += usb/xhci_events.c
 libc-$(CONFIG_LP_USB_XHCI) += usb/xhci_commands.c
 libc-$(CONFIG_LP_USB_XHCI) += usb/xhci_rh.c
 libc-$(CONFIG_LP_USB_HID) += usb/usbhid.c
 libc-$(CONFIG_LP_USB_MSC) += usb/usbmsc.c
 libc-$(CONFIG_LP_USB_DWC2) += usb/dwc2.c
 libc-$(CONFIG_LP_USB_DWC2) += usb/dwc2_rh.c
 
 # USB device stack
 libc-$(CONFIG_LP_UDC) += udc/udc.c
 libc-$(CONFIG_LP_UDC_CI) += udc/chipidea.c
 libc-$(CONFIG_LP_UDC_DWC2) += udc/dwc2.c
 
 # used by both USB HID and keyboard
 libc-y += hid.c
diff --git a/payloads/libpayload/drivers/timer/Kconfig b/payloads/libpayload/drivers/timer/Kconfig
index 0b981b0..b3ab6ec 100644
--- a/payloads/libpayload/drivers/timer/Kconfig
+++ b/payloads/libpayload/drivers/timer/Kconfig
@@ -1,128 +1,141 @@
 ##
 ## This file is part of the coreboot project.
 ##
 ## This program is free software; you can redistribute it and/or modify
 ## it under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; version 2 of the License.
 ##
 ## This program is distributed in the hope that it will be useful,
 ## but WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 
 config TIMER_RDTSC
 	bool
 	default y
 	depends on ARCH_X86
 
 choice
 	prompt "Timer driver"
 	default TIMER_NONE
 	depends on !ARCH_X86
 
 config TIMER_NONE
 	bool "None"
 	help
 	  The timer driver is provided by the payload itself.
 
 config TIMER_MCT
 	bool "Exynos MCT"
 
 config TIMER_TEGRA_1US
 	bool "Tegra 1us"
 
 config TIMER_IPQ806X
 	bool "Timer for ipq806x platforms"
 
 config TIMER_ARMADA38X
         bool "Timer for armada38x platforms"
 	help
 	  This is the timer driver for marvell armada38x
 	  platforms.
 
 config TIMER_IPQ40XX
 	bool "Timer for ipq40xx platforms"
 	help
 	  This is the timer driver for QCA IPQ40xx based
 	  platforms.
 
 config TIMER_RK
 	bool "Timer for Rockchip"
 
 config TIMER_BG4CD
 	bool "Marvell BG4CD"
 
 config TIMER_CYGNUS
 	bool "Timer for Cygnus"
 
 config TIMER_IMG_PISTACHIO
 	bool "Timer for IMG Pistachio"
 
 config TIMER_MTK
 	bool "Timer for MediaTek MT8173"
 
+config TIMER_MVMAP2315
+	bool "Timer for Marvell MVMAP2315"
+
 endchoice
 
 config TIMER_MCT_HZ
 	int "Exynos MCT frequency"
 	depends on TIMER_MCT
 	default 24000000
 
 config TIMER_MCT_ADDRESS
 	hex "Exynos MCT base address"
 	depends on TIMER_MCT
 	default 0x101c0000
 
 config TIMER_RK_ADDRESS
 	hex "Rockchip timer base address"
 	depends on TIMER_RK
 	default 0xff810020
 
 config TIMER_TEGRA_1US_ADDRESS
 	hex "Tegra u1s timer base address"
 	depends on TIMER_TEGRA_1US
 	default 0x60005010
 
 config IPQ806X_TIMER_FREQ
 	int "Hardware timer frequency"
 	default 32000
 	depends on TIMER_IPQ806X
 	help
 	  IPQ hardware presently provides a single timer running at 32KHz, a
 	  finer granulariry timer is available but is not yet enabled.
 
 config IPQ806X_TIMER_REG
 	hex "Timer register address"
 	default 0x0200A008
 	depends on TIMER_IPQ806X
 	help
 	  Address of the register to read a free running timer value.
 
 config ARMADA38X_TIMER_FREQ
         int "Hardware timer frequency"
         depends on TIMER_ARMADA38X
         default 25000000
 
 config ARMADA38X_TIMER_REG
         hex "Timer register address"
         default 0xF1020314
         depends on TIMER_ARMADA38X
 
+config MVMAP2315_TIMER_FREQ
+	int "Hardware timer frequency"
+	depends on TIMER_MVMAP2315
+	default 1000000
+
+config MVMAP2315_TIMER_REG
+	hex "Timer register address"
+	depends on TIMER_MVMAP2315
+	default 0xE1020004
+
 config IPROC_PERIPH_GLB_TIM_REG_BASE
 	hex "Cygnus timer base address"
 	depends on TIMER_CYGNUS
 	default 0x19020200
 
 config TIMER_MTK_HZ
 	int "MediaTek GPT frequency"
 	depends on TIMER_MTK
 	default 13000000
 	help
 	  Clock frequency of MediaTek General Purpose Timer.
 
 config TIMER_MTK_ADDRESS
 	hex "MTK GPT register address"
 	depends on TIMER_MTK
 	default 0x10008048
 	help
 	  Address of GPT4's counter register to read the FREERUN-mode timer value.
diff --git a/payloads/libpayload/drivers/timer/mvmap2315.c b/payloads/libpayload/drivers/timer/mvmap2315.c
new file mode 100644
index 0000000..5b1f813
--- /dev/null
+++ b/payloads/libpayload/drivers/timer/mvmap2315.c
@@ -0,0 +1,44 @@
+/*
+ * This file is part of the coreboot project.
+ *
+ * Copyright (C) 2016 Marvell Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <assert.h>
+#include <libpayload.h>
+
+static u32 *reg = (void *)CONFIG_LP_MVMAP2315_TIMER_REG;
+
+uint64_t timer_hz(void)
+{
+	return CONFIG_LP_MVMAP2315_TIMER_FREQ;
+}
+
+uint64_t timer_raw_value(void)
+{
+	/* invert count to change from down to up count */
+	return ~readl(reg);
+}
