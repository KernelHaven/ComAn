2014-01-05 08:49:29 +0200
diff --git a/src/arch/armv7/tables.c b/src/arch/armv7/tables.c
index 3f5338c..7e7cbe4 100644
--- a/src/arch/armv7/tables.c
+++ b/src/arch/armv7/tables.c
@@ -1,83 +1,79 @@
 /*
  * This file is part of the coreboot project.
  *
  * Copyright (C) 2003 Eric Biederman
  * Copyright (C) 2005 Steve Magnani
  * Copyright (C) 2008-2009 coresystems GmbH
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; version 2 of the License.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
  */
 
 #include <console/console.h>
 #include <cpu/cpu.h>
 #include <boot/tables.h>
 #include <boot/coreboot_tables.h>
 #include <string.h>
 #include <cbmem.h>
 #include <lib.h>
 
 #define MAX_COREBOOT_TABLE_SIZE (8 * 1024)
 
 #if !CONFIG_DYNAMIC_CBMEM
 void __attribute__((weak)) get_cbmem_table(uint64_t *base, uint64_t *size)
 {
 	printk(BIOS_WARNING, "WARNING: you need to define get_cbmem_table for your board\n");
 	*base = 0;
 	*size = 0;
 }
 #endif
 
 void cbmem_arch_init(void)
 {
 }
 
 void cbmem_fail_resume(void)
 {
 }
 
 struct lb_memory *write_tables(void)
 {
 	unsigned long table_pointer, new_table_pointer;
 
-#if !CONFIG_DYNAMIC_CBMEM
-	cbmem_base_check();
-#endif
-
 	post_code(0x9d);
 
 	table_pointer = (unsigned long)cbmem_add(CBMEM_ID_CBTABLE,
 						MAX_COREBOOT_TABLE_SIZE);
 	if (!table_pointer) {
 		printk(BIOS_ERR, "Could not add CBMEM for coreboot table.\n");
 		return NULL;
 	}
 
 	new_table_pointer = write_coreboot_table(0UL, 0UL,
 				table_pointer, table_pointer);
 
 	if (new_table_pointer > (table_pointer + MAX_COREBOOT_TABLE_SIZE)) {
 		printk(BIOS_ERR, "coreboot table didn't fit (%lx/%x bytes)\n",
 			   new_table_pointer - table_pointer, MAX_COREBOOT_TABLE_SIZE);
 	}
 
 	printk(BIOS_DEBUG, "coreboot table: %ld bytes.\n",
 			new_table_pointer - table_pointer);
 
 	post_code(0x9e);
 
 	/* Print CBMEM sections */
 	cbmem_list();
 
 	return get_lb_mem();
 }
diff --git a/src/arch/x86/boot/tables.c b/src/arch/x86/boot/tables.c
index eea9bf1..40bf087 100644
--- a/src/arch/x86/boot/tables.c
+++ b/src/arch/x86/boot/tables.c
@@ -1,261 +1,257 @@
 /*
  * This file is part of the coreboot project.
  *
  * Copyright (C) 2003 Eric Biederman
  * Copyright (C) 2005 Steve Magnani
  * Copyright (C) 2008-2009 coresystems GmbH
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; version 2 of the License.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
  */
 
 #include <console/console.h>
 #include <cpu/cpu.h>
 #include <boot/tables.h>
 #include <boot/coreboot_tables.h>
 #include <arch/pirq_routing.h>
 #include <arch/smp/mpspec.h>
 #include <arch/acpi.h>
 #include <string.h>
 #include <cpu/x86/multiboot.h>
 #include <cbmem.h>
 #include <lib.h>
 #include <smbios.h>
 
 
 void cbmem_arch_init(void)
 {
 	/* defined in gdt.c */
 	move_gdt();
 }
 
 struct lb_memory *write_tables(void)
 {
 	unsigned long low_table_start, low_table_end;
 	unsigned long rom_table_start, rom_table_end;
 
 	/* Even if high tables are configured, some tables are copied both to
 	 * the low and the high area, so payloads and OSes don't need to know
 	 * about the high tables.
 	 */
 	unsigned long high_table_pointer;
 
-#if !CONFIG_DYNAMIC_CBMEM
-	cbmem_base_check();
-#endif
-
 	rom_table_start = 0xf0000;
 	rom_table_end =   0xf0000;
 
 	/* Start low addr at 0x500, so we don't run into conflicts with the BDA
 	 * in case our data structures grow beyond 0x400. Only multiboot, GDT
 	 * and the coreboot table use low_tables.
 	 */
 	low_table_start = 0;
 	low_table_end = 0x500;
 
 #if CONFIG_GENERATE_PIRQ_TABLE
 #define MAX_PIRQ_TABLE_SIZE (4 * 1024)
 	post_code(0x9a);
 
 	/* This table must be between 0x0f0000 and 0x100000 */
 	rom_table_end = write_pirq_routing_table(rom_table_end);
 	rom_table_end = ALIGN(rom_table_end, 1024);
 
 	/* And add a high table version for those payloads that
 	 * want to live in the F segment
 	 */
 	high_table_pointer = (unsigned long)cbmem_add(CBMEM_ID_PIRQ, MAX_PIRQ_TABLE_SIZE);
 	if (high_table_pointer) {
 		unsigned long new_high_table_pointer;
 		new_high_table_pointer = write_pirq_routing_table(high_table_pointer);
 		// FIXME make pirq table code intelligent enough to know how
 		// much space it's going to need.
 		if (new_high_table_pointer > (high_table_pointer + MAX_PIRQ_TABLE_SIZE)) {
 			printk(BIOS_ERR, "ERROR: Increase PIRQ size.\n");
 		}
 		printk(BIOS_DEBUG, "PIRQ table: %ld bytes.\n",
 				new_high_table_pointer - high_table_pointer);
 	}
 
 #endif
 
 #if CONFIG_GENERATE_MP_TABLE
 #define MAX_MP_TABLE_SIZE (4 * 1024)
 	post_code(0x9b);
 
 	/* The smp table must be in 0-1K, 639K-640K, or 960K-1M */
 	rom_table_end = write_smp_table(rom_table_end);
 	rom_table_end = ALIGN(rom_table_end, 1024);
 
 	high_table_pointer = (unsigned long)cbmem_add(CBMEM_ID_MPTABLE, MAX_MP_TABLE_SIZE);
 	if (high_table_pointer) {
 		unsigned long new_high_table_pointer;
 		new_high_table_pointer = write_smp_table(high_table_pointer);
 		// FIXME make mp table code intelligent enough to know how
 		// much space it's going to need.
 		if (new_high_table_pointer > (high_table_pointer + MAX_MP_TABLE_SIZE)) {
 			printk(BIOS_ERR, "ERROR: Increase MP table size.\n");
 		}
 
 		printk(BIOS_DEBUG, "MP table: %ld bytes.\n",
 				new_high_table_pointer - high_table_pointer);
 	}
 #endif /* CONFIG_GENERATE_MP_TABLE */
 
 #if CONFIG_GENERATE_ACPI_TABLES
 #define MAX_ACPI_SIZE (45 * 1024)
 	post_code(0x9c);
 
 	/* Write ACPI tables to F segment and high tables area */
 
 	/* Ok, this is a bit hacky still, because some day we want to have this
 	 * completely dynamic. But right now we are setting fixed sizes.
 	 * It's probably still better than the old high_table_base code because
 	 * now at least we know when we have an overflow in the area.
 	 *
 	 * We want to use 1MB - 64K for Resume backup. We use 512B for TOC and
 	 * 512 byte for GDT, 4K for PIRQ and 4K for MP table and 8KB for the
 	 * coreboot table. This leaves us with 47KB for all of ACPI. Let's see
 	 * how far we get.
 	 */
 	high_table_pointer = (unsigned long)cbmem_add(CBMEM_ID_ACPI, MAX_ACPI_SIZE);
 	if (high_table_pointer) {
 		unsigned long acpi_start = high_table_pointer;
 		unsigned long new_high_table_pointer;
 
 		rom_table_end = ALIGN(rom_table_end, 16);
 		new_high_table_pointer = write_acpi_tables(high_table_pointer);
 		if (new_high_table_pointer > ( high_table_pointer + MAX_ACPI_SIZE)) {
 			printk(BIOS_ERR, "ERROR: Increase ACPI size\n");
 		}
                 printk(BIOS_DEBUG, "ACPI tables: %ld bytes.\n",
 				new_high_table_pointer - high_table_pointer);
 
 		/* Now we need to create a low table copy of the RSDP. */
 
 		/* First we look for the high table RSDP */
 		while (acpi_start < new_high_table_pointer) {
 			if (memcmp(((acpi_rsdp_t *)acpi_start)->signature, RSDP_SIG, 8) == 0) {
 				break;
 			}
 			acpi_start++;
 		}
 
 		/* Now, if we found the RSDP, we take the RSDT and XSDT pointer
 		 * from it in order to write the low RSDP
 		 */
 		if (acpi_start < new_high_table_pointer) {
 			acpi_rsdp_t *low_rsdp = (acpi_rsdp_t *)rom_table_end,
 				    *high_rsdp = (acpi_rsdp_t *)acpi_start;
 
 			acpi_write_rsdp(low_rsdp,
 				(acpi_rsdt_t *)(high_rsdp->rsdt_address),
 				(acpi_xsdt_t *)((unsigned long)high_rsdp->xsdt_address));
 		} else {
 			printk(BIOS_ERR, "ERROR: Didn't find RSDP in high table.\n");
 		}
 		rom_table_end = ALIGN(rom_table_end + sizeof(acpi_rsdp_t), 16);
 	} else {
 		rom_table_end = write_acpi_tables(rom_table_end);
 		rom_table_end = ALIGN(rom_table_end, 1024);
 	}
 
 #endif
 #define MAX_SMBIOS_SIZE 2048
 #if CONFIG_GENERATE_SMBIOS_TABLES
 	high_table_pointer = (unsigned long)cbmem_add(CBMEM_ID_SMBIOS, MAX_SMBIOS_SIZE);
 	if (high_table_pointer) {
 		unsigned long new_high_table_pointer;
 
 		new_high_table_pointer = smbios_write_tables(high_table_pointer);
 		rom_table_end = ALIGN(rom_table_end, 16);
 		memcpy((void *)rom_table_end, (void *)high_table_pointer, sizeof(struct smbios_entry));
 		rom_table_end += sizeof(struct smbios_entry);
 
 		if (new_high_table_pointer > ( high_table_pointer + MAX_SMBIOS_SIZE)) {
 			printk(BIOS_ERR, "ERROR: Increase SMBIOS size\n");
 		}
                 printk(BIOS_DEBUG, "SMBIOS tables: %ld bytes.\n",
 				new_high_table_pointer - high_table_pointer);
 	} else {
 		unsigned long new_rom_table_end = smbios_write_tables(rom_table_end);
 		printk(BIOS_DEBUG, "SMBIOS size %ld bytes\n", new_rom_table_end - rom_table_end);
 		rom_table_end = ALIGN(new_rom_table_end, 16);
 	}
 #endif
 
 	post_code(0x9e);
 
 #if CONFIG_HAVE_ACPI_RESUME
 /* Only add CBMEM_ID_RESUME when the ramstage isn't relocatable. */
 #if !CONFIG_RELOCATABLE_RAMSTAGE
 	/* Let's prepare the ACPI S3 Resume area now already, so we can rely on
 	 * it begin there during reboot time. We don't need the pointer, nor
 	 * the result right now. If it fails, ACPI resume will be disabled.
 	 */
 	cbmem_add(CBMEM_ID_RESUME, HIGH_MEMORY_SAVE);
 #endif
 #if CONFIG_NORTHBRIDGE_AMD_AGESA_FAMILY14 || CONFIG_NORTHBRIDGE_AMD_AGESA_FAMILY15_TN || CONFIG_NORTHBRIDGE_AMD_AGESA_FAMILY16_KB
 	cbmem_add(CBMEM_ID_RESUME_SCRATCH, CONFIG_HIGH_SCRATCH_MEMORY_SIZE);
 #endif
 #endif
 
 #define MAX_COREBOOT_TABLE_SIZE (32 * 1024)
 	post_code(0x9d);
 
 	high_table_pointer = (unsigned long)cbmem_add(CBMEM_ID_CBTABLE, MAX_COREBOOT_TABLE_SIZE);
 
 	if (high_table_pointer) {
 		unsigned long new_high_table_pointer;
 
 		/* FIXME: The high_table_base parameter is not reference when tables are high,
 		 * or high_table_pointer >1 MB.
 		 */
 #if CONFIG_DYNAMIC_CBMEM
 		u64 fixme_high_tables_base = 0;
 #else
 		u64 fixme_high_tables_base = (u32)get_cbmem_toc();
 #endif
 
 		/* Also put a forwarder entry into 0-4K */
 		new_high_table_pointer = write_coreboot_table(low_table_start, low_table_end,
 				fixme_high_tables_base, high_table_pointer);
 
 		if (new_high_table_pointer > (high_table_pointer +
 					MAX_COREBOOT_TABLE_SIZE))
 			printk(BIOS_ERR, "%s: coreboot table didn't fit (%lx)\n",
 				   __func__, new_high_table_pointer -
 				   high_table_pointer);
 
                 printk(BIOS_DEBUG, "coreboot table: %ld bytes.\n",
 				new_high_table_pointer - high_table_pointer);
 	} else {
 		/* The coreboot table must be in 0-4K or 960K-1M */
 		rom_table_end = write_coreboot_table(
 				     low_table_start, low_table_end,
 				     rom_table_start, rom_table_end);
 	}
 
 #if CONFIG_MULTIBOOT
 	post_code(0x9d);
 
 	/* The Multiboot information structure */
 	write_multiboot_info(rom_table_end);
 #endif
 
 	/* Print CBMEM sections */
 	cbmem_list();
 
 	return get_lb_mem();
 }
diff --git a/src/include/cbmem.h b/src/include/cbmem.h
index f9d268a..746f40c 100644
--- a/src/include/cbmem.h
+++ b/src/include/cbmem.h
@@ -1,178 +1,177 @@
 /*
  * This file is part of the coreboot project.
  *
  * Copyright (C) 2009 coresystems GmbH
  * Copyright (C) 2013 Google, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; version 2 of the License.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, 02110-1301 USA
  */
 
 #ifndef _CBMEM_H_
 #define _CBMEM_H_
 
 /* Reserve 128k for ACPI and other tables */
 #if CONFIG_CONSOLE_CBMEM
 #define HIGH_MEMORY_DEF_SIZE	( 256 * 1024 )
 #else
 #define HIGH_MEMORY_DEF_SIZE	( 128 * 1024 )
 #endif
 
 #if CONFIG_HAVE_ACPI_RESUME
 #if CONFIG_RELOCATABLE_RAMSTAGE
 #define HIGH_MEMORY_SAVE	0
 #else
 #define HIGH_MEMORY_SAVE	(CONFIG_RAMTOP - CONFIG_RAMBASE)
 #endif
 
 #define HIGH_MEMORY_SIZE	(HIGH_MEMORY_SAVE + CONFIG_HIGH_SCRATCH_MEMORY_SIZE + HIGH_MEMORY_DEF_SIZE)
 
 /* Delegation of resume backup memory so we don't have to
  * (slowly) handle backing up OS memory in romstage.c
  */
 #define CBMEM_BOOT_MODE		0x610
 #define CBMEM_RESUME_BACKUP	0x614
 
 #else /* CONFIG_HAVE_ACPI_RESUME */
 #define HIGH_MEMORY_SIZE	HIGH_MEMORY_DEF_SIZE
 #endif /* CONFIG_HAVE_ACPI_RESUME */
 
 #define CBMEM_ID_FREESPACE	0x46524545
 #define CBMEM_ID_GDT		0x4c474454
 #define CBMEM_ID_ACPI		0x41435049
 #define CBMEM_ID_ACPI_GNVS	0x474e5653
 #define CBMEM_ID_ACPI_GNVS_PTR	0x474e5650
 #define CBMEM_ID_CBTABLE	0x43425442
 #define CBMEM_ID_PIRQ		0x49525154
 #define CBMEM_ID_MPTABLE	0x534d5054
 #define CBMEM_ID_RESUME		0x5245534d
 #define CBMEM_ID_RESUME_SCRATCH	0x52455343
 #define CBMEM_ID_SMBIOS         0x534d4254
 #define CBMEM_ID_TIMESTAMP	0x54494d45
 #define CBMEM_ID_MRCDATA	0x4d524344
 #define CBMEM_ID_CONSOLE	0x434f4e53
 #define CBMEM_ID_ELOG		0x454c4f47
 #define CBMEM_ID_COVERAGE	0x47434f56
 #define CBMEM_ID_ROMSTAGE_INFO	0x47545352
 #define CBMEM_ID_ROMSTAGE_RAM_STACK 0x90357ac4
 #define CBMEM_ID_RAMSTAGE	0x9a357a9e
 #define CBMEM_ID_RAMSTAGE_CACHE	0x9a3ca54e
 #define CBMEM_ID_ROOT		0xff4007ff
 #define CBMEM_ID_VBOOT_HANDOFF	0x780074f0
 #define CBMEM_ID_CAR_GLOBALS	0xcac4e6a3
 #define CBMEM_ID_EHCI_DEBUG	0xe4c1deb9
 #define CBMEM_ID_NONE		0x00000000
 #define CBMEM_ID_AGESA_RUNTIME	0x41474553
 #define CBMEM_ID_HOB_POINTER		0x484f4221
 
 #ifndef __ASSEMBLER__
 #include <stdint.h>
 
 struct cbmem_entry;
 
 #if CONFIG_DYNAMIC_CBMEM
 
 /*
  * The dynamic cbmem infrastructure allows for growing cbmem dynamically as
  * things are added. It requires an external function, cbmem_top(), to be
  * implemented by the board or chipset to define the upper address where
  * cbmem lives. This address is required to be a 32-bit address. Additionally,
  * the address needs to be consistent in both romstage and ramstage.  The
  * dynamic cbmem infrastructure allocates new regions below the last allocated
  * region. Regions are defined by a cbmem_entry struct that is opaque. Regions
  * may be removed, but the last one added is the only that can be removed.
  *
  * Dynamic cbmem has two allocators within it. All allocators use a top down
  * allocation scheme. However, there are 2 modes for each allocation depending
  * on the requested size. There are large allocations and small allocations.
  * An allocation is considered to be small when it is less than or equal to
  * DYN_CBMEM_ALIGN_SIZE / 2. The smaller allocations are fit into a larger
  * allocation region.
  */
 
 #define DYN_CBMEM_ALIGN_SIZE (4096)
 
 /* Initialize cbmem to be empty. */
 void cbmem_initialize_empty(void);
 
 /* Return the top address for dynamic cbmem. The address returned needs to
  * be consistent across romstage and ramstage, and it is required to be
  * below 4GiB. */
 void *cbmem_top(void);
 
 /* Add a cbmem entry of a given size and id. These return NULL on failure. The
  * add function performs a find first and do not check against the original
  * size. */
 const struct cbmem_entry *cbmem_entry_add(u32 id, u64 size);
 
 /* Find a cbmem entry of a given id. These return NULL on failure. */
 const struct cbmem_entry *cbmem_entry_find(u32 id);
 
 /* Remove a region defined by a cbmem_entry. Returns 0 on success, < 0 on
  * error. Note: A cbmem_entry cannot be removed unless it was the last one
  * added. */
 int cbmem_entry_remove(const struct cbmem_entry *entry);
 
 /* cbmem_entry accessors to get pointer and size of a cbmem_entry. */
 void *cbmem_entry_start(const struct cbmem_entry *entry);
 u64 cbmem_entry_size(const struct cbmem_entry *entry);
 
 
 #else /* !CONFIG_DYNAMIC_CBMEM */
 
 #ifndef __PRE_RAM__
 void set_top_of_ram(uint64_t ramtop);
 void backup_top_of_ram(uint64_t ramtop);
 void cbmem_late_set_table(uint64_t base, uint64_t size);
-int cbmem_base_check(void);
 #endif
 
 int cbmem_reinit(void);
 
 void get_cbmem_table(uint64_t *base, uint64_t *size);
 struct cbmem_entry *get_cbmem_toc(void);
 
 #endif /* CONFIG_DYNAMIC_CBMEM */
 
 /* Common API between cbmem and dynamic cbmem. */
 
 unsigned long get_top_of_ram(void);
 
 /* By default cbmem is attempted to be recovered. Returns 0 if cbmem was
  * recovered or 1 if cbmem had to be reinitialized. */
 int cbmem_initialize(void);
 /* Add a cbmem entry of a given size and id. These return NULL on failure. The
  * add function performs a find first and do not check against the original
  * size. */
 void *cbmem_add(u32 id, u64 size);
 /* Find a cbmem entry of a given id. These return NULL on failure. */
 void *cbmem_find(u32 id);
 
 #ifndef __PRE_RAM__
 /* Ramstage only functions. */
 /* Add the cbmem memory used to the memory tables. */
 struct lb_memory;
 void cbmem_add_lb_mem(struct lb_memory *mem);
 void cbmem_list(void);
 void cbmem_arch_init(void);
 void cbmem_print_entry(int n, u32 id, u64 start, u64 size);
 void cbmem_fail_resume(void);
 #else
 static inline void cbmem_arch_init(void) {}
 static inline void cbmem_fail_resume(void) {}
 #endif /* __PRE_RAM__ */
 
 #endif /* __ASSEMBLER__ */
 
 
 #endif /* _CBMEM_H_ */
diff --git a/src/lib/cbmem.c b/src/lib/cbmem.c
index e6d3913..6b0cbc8 100644
--- a/src/lib/cbmem.c
+++ b/src/lib/cbmem.c
@@ -1,294 +1,283 @@
 /*
  * This file is part of the coreboot project.
  *
  * Copyright (C) 2009 coresystems GmbH
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; version 2 of the License.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, 02110-1301 USA
  */
 
 #include <types.h>
 #include <string.h>
 #include <bootstate.h>
 #include <cbmem.h>
 #include <boot/coreboot_tables.h>
 #include <console/console.h>
 #include <arch/early_variables.h>
 #if CONFIG_HAVE_ACPI_RESUME && !defined(__PRE_RAM__)
 #include <arch/acpi.h>
 #endif
 
 // The CBMEM TOC reserves 512 bytes to keep
 // the other entries somewhat aligned.
 // Increase if MAX_CBMEM_ENTRIES exceeds 21
 #define CBMEM_TOC_RESERVED	512
 #define MAX_CBMEM_ENTRIES	16
 #define CBMEM_MAGIC		0x434f5245
 
 struct cbmem_entry {
 	u32 magic;
 	u32 id;
 	u64 base;
 	u64 size;
 } __attribute__((packed));
 
 #ifndef __PRE_RAM__
 static uint64_t cbmem_base = 0;
 static uint64_t cbmem_size = 0;
 #endif
 
 static void cbmem_trace_location(uint64_t base, uint64_t size, const char *s)
 {
 	if (base && size && s) {
 		printk(BIOS_DEBUG, "CBMEM region %llx-%llx (%s)\n",
 			base, base + size - 1, s);
 	}
 }
 
 static void cbmem_locate_table(uint64_t *base, uint64_t *size)
 {
 #ifdef __PRE_RAM__
 	get_cbmem_table(base, size);
 #else
 	if (!(cbmem_base && cbmem_size)) {
 		get_cbmem_table(&cbmem_base, &cbmem_size);
 		cbmem_trace_location(cbmem_base, cbmem_size, __FUNCTION__);
 	}
 	*base = cbmem_base;
 	*size = cbmem_size;
 #endif
 }
 
 struct cbmem_entry *get_cbmem_toc(void)
 {
 	uint64_t base, size;
 	cbmem_locate_table(&base, &size);
 	return (struct cbmem_entry *)(unsigned long)base;
 }
 
 #if !defined(__PRE_RAM__)
 void cbmem_late_set_table(uint64_t base, uint64_t size)
 {
 	cbmem_trace_location(base, size, __FUNCTION__);
 	cbmem_base = base;
 	cbmem_size = size;
 }
 #endif
 
 /**
  * cbmem is a simple mechanism to do some kind of book keeping of the coreboot
  * high tables memory. This is a small amount of memory which is "stolen" from
  * the system memory for coreboot purposes. Usually this memory is used for
  *  - the coreboot table
  *  - legacy tables (PIRQ, MP table)
  *  - ACPI tables
  *  - suspend/resume backup memory
  */
 
 #if CONFIG_EARLY_CBMEM_INIT || !defined(__PRE_RAM__)
 static void cbmem_init(void)
 {
 	uint64_t baseaddr, size;
 	struct cbmem_entry *cbmem_toc;
 
 	cbmem_locate_table(&baseaddr, &size);
 	cbmem_trace_location(baseaddr, size, __FUNCTION__);
 
 	cbmem_toc = (struct cbmem_entry *)(unsigned long)baseaddr;
 
 	if (size < (64 * 1024)) {
 		printk(BIOS_DEBUG, "Increase CBMEM size!\n");
 		for (;;) ;
 	}
 
 	memset(cbmem_toc, 0, CBMEM_TOC_RESERVED);
 
 	cbmem_toc[0] = (struct cbmem_entry) {
 		.magic	= CBMEM_MAGIC,
 		.id	= CBMEM_ID_FREESPACE,
 		.base	= baseaddr + CBMEM_TOC_RESERVED,
 		.size	= size - CBMEM_TOC_RESERVED
 	};
 }
 #endif
 
 int cbmem_reinit(void)
 {
 	uint64_t baseaddr, size;
 	struct cbmem_entry *cbmem_toc;
 
 	cbmem_locate_table(&baseaddr, &size);
 	cbmem_trace_location(baseaddr, size, __FUNCTION__);
 
 	cbmem_toc = (struct cbmem_entry *)(unsigned long)baseaddr;
 
 	return (cbmem_toc[0].magic == CBMEM_MAGIC);
 }
 
 void *cbmem_add(u32 id, u64 size)
 {
 	struct cbmem_entry *cbmem_toc;
 	int i;
 	void *p;
 
 	/*
 	 * This could be a restart, check if the section is there already. It
 	 * is remotely possible that the dram contents persisted over the
 	 * bootloader upgrade AND the same section now needs more room, but
 	 * this is quite a remote possibility and it is ignored here.
 	 */
 	p = cbmem_find(id);
 	if (p) {
 		printk(BIOS_NOTICE,
 		       "CBMEM section %x: using existing location at %p.\n",
 		       id, p);
 		return p;
 	}
 
 	cbmem_toc = get_cbmem_toc();
 
 	if (cbmem_toc == NULL) {
 		return NULL;
 	}
 
 	if (cbmem_toc[0].magic != CBMEM_MAGIC) {
 		printk(BIOS_ERR, "ERROR: CBMEM was not initialized yet.\n");
 		return NULL;
 	}
 
 	/* Will the entry fit at all? */
 	if (size > cbmem_toc[0].size) {
 		printk(BIOS_ERR, "ERROR: Not enough memory for table %x\n", id);
 		return NULL;
 	}
 
 	/* Align size to 512 byte blocks */
 
 	size = ALIGN(size, 512) < cbmem_toc[0].size ?
 		ALIGN(size, 512) : cbmem_toc[0].size;
 
 	/* Now look for the first free/usable TOC entry */
 	for (i = 0; i < MAX_CBMEM_ENTRIES; i++) {
 		if (cbmem_toc[i].id == CBMEM_ID_NONE)
 			break;
 	}
 
 	if (i >= MAX_CBMEM_ENTRIES) {
 		printk(BIOS_ERR, "ERROR: No more CBMEM entries available.\n");
 		return NULL;
 	}
 
 	printk(BIOS_DEBUG, "Adding CBMEM entry as no. %d\n", i);
 
 	cbmem_toc[i] = (struct cbmem_entry) {
 		.magic = CBMEM_MAGIC,
 		.id	= id,
 		.base	= cbmem_toc[0].base,
 		.size	= size
 	};
 
 	cbmem_toc[0].base += size;
 	cbmem_toc[0].size -= size;
 
 	return (void *)(uintptr_t)cbmem_toc[i].base;
 }
 
 void *cbmem_find(u32 id)
 {
 	struct cbmem_entry *cbmem_toc;
 	int i;
 	cbmem_toc = get_cbmem_toc();
 
 	if (cbmem_toc == NULL)
 		return NULL;
 
 	for (i = 0; i < MAX_CBMEM_ENTRIES; i++) {
 		if (cbmem_toc[i].id == id)
 			return (void *)(unsigned long)cbmem_toc[i].base;
 	}
 
 	return (void *)NULL;
 }
 
 #if CONFIG_EARLY_CBMEM_INIT || !defined(__PRE_RAM__)
 /* Returns True if it was not initialized before. */
 int cbmem_initialize(void)
 {
 	int rv = 0;
 
 	/* We expect the romstage to always initialize it. */
 	if (!cbmem_reinit()) {
 		cbmem_init();
 		cbmem_fail_resume();
 		rv = 1;
 	}
 #ifndef __PRE_RAM__
 	cbmem_arch_init();
 #endif
 	/* Migrate cache-as-ram variables. */
 	car_migrate_variables();
 
 	return rv;
 }
 #endif
 
 #ifndef __PRE_RAM__
 static void init_cbmem_post_device(void *unused)
 {
 	cbmem_initialize();
 #if CONFIG_CONSOLE_CBMEM
 	cbmemc_reinit();
 #endif
 }
 
 BOOT_STATE_INIT_ENTRIES(cbmem_bscb) = {
 	BOOT_STATE_INIT_ENTRY(BS_POST_DEVICE, BS_ON_ENTRY,
 	                      init_cbmem_post_device, NULL),
 };
 
-int cbmem_base_check(void)
-{
-	if (!cbmem_base) {
-		printk(BIOS_ERR, "ERROR: CBMEM Base is not set.\n");
-		// Are there any boards without?
-		// Stepan thinks we should die() here!
-	}
-	printk(BIOS_DEBUG, "CBMEM Base is %llx.\n", cbmem_base);
-	return !!cbmem_base;
-}
-
 void cbmem_add_lb_mem(struct lb_memory *mem)
 {
 	lb_add_memory_range(mem, LB_MEM_TABLE, cbmem_base, cbmem_size);
 }
 
 void cbmem_list(void)
 {
 	struct cbmem_entry *cbmem_toc;
 	int i;
 	cbmem_toc = get_cbmem_toc();
 
 	if (cbmem_toc == NULL)
 		return;
 
 	for (i = 0; i < MAX_CBMEM_ENTRIES; i++) {
 
 		if (cbmem_toc[i].magic != CBMEM_MAGIC)
 			continue;
 		cbmem_print_entry(i, cbmem_toc[i].id, cbmem_toc[i].base,
 		                  cbmem_toc[i].size);
 	}
 }
 #endif
 
 
