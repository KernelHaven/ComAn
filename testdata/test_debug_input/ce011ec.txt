2013-08-06 16:00:37 -0700
diff --git a/src/arch/armv7/bootblock_simple.c b/src/arch/armv7/bootblock_simple.c
index 541175c..6ed63ce 100644
--- a/src/arch/armv7/bootblock_simple.c
+++ b/src/arch/armv7/bootblock_simple.c
@@ -1,79 +1,76 @@
 /*
  * This file is part of the coreboot project.
  *
  * Copyright 2010 Google Inc.
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License as
  * published by the Free Software Foundation; version 2 of
  * the License.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
  * MA 02110-1301 USA
  */
 
 #include <bootblock_common.h>
 #include <arch/cache.h>
 #include <arch/hlt.h>
 #include <arch/stages.h>
 #include <cbfs.h>
 #include <console/console.h>
 
 #include "stages.c"
 
 static int boot_cpu(void)
 {
 	/*
 	 * FIXME: This is a stub for now. All non-boot CPUs should be
 	 * waiting for an interrupt. We could move the chunk of assembly
 	 * which puts them to sleep in here...
 	 */
 	return 1;
 }
 
 void main(void)
 {
 	const char *stage_name = "fallback/romstage";
 	void *entry;
 	uint32_t sctlr;
 
 	/* Globally disable MMU, caches, and branch prediction (these should
 	 * be disabled by default on reset) */
 	sctlr = read_sctlr();
 	sctlr &= ~(SCTLR_M | SCTLR_C | SCTLR_Z | SCTLR_I);
 	write_sctlr(sctlr);
 
 	armv7_invalidate_caches();
 
 	/*
 	 * Re-enable icache and branch prediction. MMU and dcache will be
 	 * set up later.
-	 *
-	 * Note: If booting from USB, we need to disable branch prediction
-	 * before copying from USB into RAM (FIXME: why?)
 	 */
 	sctlr = read_sctlr();
 	sctlr |= SCTLR_Z | SCTLR_I;
 	write_sctlr(sctlr);
 
 	if (boot_cpu()) {
 		bootblock_cpu_init();
 		bootblock_mainboard_init();
 	}
 
 #ifdef CONFIG_BOOTBLOCK_CONSOLE
 	console_init();
 #endif
 
 	entry = cbfs_load_stage(CBFS_DEFAULT_MEDIA, stage_name);
 
 	if (entry) stage_exit(entry);
 	hlt();
 }
diff --git a/src/cpu/samsung/exynos5250/Makefile.inc b/src/cpu/samsung/exynos5250/Makefile.inc
index e029c67..6d7ae16 100644
--- a/src/cpu/samsung/exynos5250/Makefile.inc
+++ b/src/cpu/samsung/exynos5250/Makefile.inc
@@ -1,59 +1,59 @@
 # Run an intermediate step when producing coreboot.rom
 # that adds additional components to the final firmware
 # image outside of CBFS
 INTERMEDIATE += exynos5250_add_bl1
 
-bootblock-y += spi.c
+bootblock-y += spi.c alternate_cbfs.c
 bootblock-y += pinmux.c mct.c power.c
 # Clock is required for UART
 bootblock-$(CONFIG_BOOTBLOCK_CONSOLE) += clock_init.c
 bootblock-$(CONFIG_BOOTBLOCK_CONSOLE) += clock.c
 bootblock-$(CONFIG_BOOTBLOCK_CONSOLE) += monotonic_timer.c
 ifeq ($(CONFIG_CONSOLE_SERIAL_UART),y)
 bootblock-$(CONFIG_BOOTBLOCK_CONSOLE) += uart.c
 endif
 bootblock-y += wakeup.c
 bootblock-y += gpio.c
 bootblock-$(CONFIG_BOOTBLOCK_CONSOLE) += timer.c
 
-romstage-y += spi.c
+romstage-y += spi.c alternate_cbfs.c
 romstage-y += clock.c
 romstage-y += clock_init.c
 romstage-y += pinmux.c  # required by s3c24x0_i2c and uart.
 romstage-y += dmc_common.c
 romstage-y += dmc_init_ddr3.c
 romstage-y += power.c
 romstage-y += mct.c
 romstage-y += monotonic_timer.c
 ifeq ($(CONFIG_CONSOLE_SERIAL_UART),y)
 romstage-$(CONFIG_EARLY_CONSOLE) += uart.c
 endif
 romstage-y += wakeup.c
 romstage-y += gpio.c
 romstage-y += timer.c
 romstage-y += i2c.c
 #romstage-y += wdt.c
 romstage-y += cbmem.c
 
-ramstage-y += spi.c
+ramstage-y += spi.c alternate_cbfs.c
 ramstage-y += clock.c
 ramstage-y += clock_init.c
 ramstage-y += pinmux.c
 ramstage-y += power.c
 ramstage-$(CONFIG_CONSOLE_SERIAL_UART) += uart.c
 ramstage-y += cpu.c
 ramstage-y += tmu.c
 ramstage-y += mct.c
 ramstage-y += monotonic_timer.c
 ramstage-y += timer.c
 ramstage-y += gpio.c
 ramstage-y += i2c.c
 ramstage-y += dp-reg.c
 ramstage-y += fb.c
 ramstage-y += usb.c
 ramstage-y += cbmem.c
 
 exynos5250_add_bl1: $(obj)/coreboot.pre
 	printf "    DD         Adding Samsung Exynos5250 BL1\n"
 	dd if=3rdparty/cpu/samsung/exynos5250/bl1.bin \
 		of=$(obj)/coreboot.pre conv=notrunc >/dev/null 2>&1
diff --git a/src/cpu/samsung/exynos5250/alternate_cbfs.c b/src/cpu/samsung/exynos5250/alternate_cbfs.c
new file mode 100644
index 0000000..1549486
--- /dev/null
+++ b/src/cpu/samsung/exynos5250/alternate_cbfs.c
@@ -0,0 +1,110 @@
+/*
+ * This file is part of the coreboot project.
+ *
+ * Copyright 2013 Google Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+
+#include <assert.h>
+#include <cbfs.h>  /* This driver serves as a CBFS media source. */
+#include <stdlib.h>
+#include <string.h>
+#include <console/console.h>
+#include "alternate_cbfs.h"
+#include "spi.h"
+
+/* This allows USB A-A firmware upload from a compatible host in four parts:
+ * The first two are the bare BL1 and the Coreboot boot block, which are just
+ * written to their respective loading addresses. These transfers are initiated
+ * by the IROM / BL1, so this code has nothing to do with them.
+ *
+ * The third transfer is a valid CBFS image that contains only the romstage,
+ * and must be small enough to fit into alternate_cbfs_size[__BOOT_BLOCK__] in
+ * IRAM. It is loaded when this function gets called in the boot block, and
+ * the normal CBFS code extracts the romstage from it.
+ *
+ * The fourth transfer is also a CBFS image, but can be of arbitrary size and
+ * should contain all available stages/payloads/etc. It is loaded when this
+ * function is called a second time at the end of the romstage, and copied to
+ * alternate_cbfs_buffer[!__BOOT_BLOCK__] in DRAM. It will reside there for the
+ * rest of the firmware's lifetime and all subsequent stages (which will not
+ * have __PRE_RAM__ defined) can just directly reference it there.
+ */
+static int usb_cbfs_open(struct cbfs_media *media) {
+#ifdef __PRE_RAM__
+	static int first_run = 1;
+	int (*irom_load_usb)(void) = *irom_load_image_from_usb_ptr;
+
+	if (!first_run)
+		return 0;
+
+	if (!irom_load_usb()) {
+		printk(BIOS_ERR, "Unable to load CBFS image via USB!\n");
+		return -1;
+	}
+
+	/*
+	 * We need to trust the host/irom to copy the image to our
+	 * alternate_cbfs_buffer address... there is no way to control or even
+	 * check the transfer size or target address from our side.
+	 */
+
+	printk(BIOS_DEBUG, "USB A-A transfer successful, CBFS image should now"
+		" be at %p\n", alternate_cbfs_buffer);
+	first_run = 0;
+#endif
+	return 0;
+}
+
+static int alternate_cbfs_close(struct cbfs_media *media) { return 0; }
+
+static size_t alternate_cbfs_read(struct cbfs_media *media, void *dest,
+				  size_t offset, size_t count) {
+	ASSERT(offset + count < alternate_cbfs_size);
+	memcpy(dest, alternate_cbfs_buffer + offset, count);
+	return count;
+}
+
+static void *alternate_cbfs_map(struct cbfs_media *media, size_t offset,
+				   size_t count) {
+	ASSERT(offset + count < alternate_cbfs_size);
+	return alternate_cbfs_buffer + offset;
+}
+
+static void *alternate_cbfs_unmap(struct cbfs_media *media,
+				  const void *buffer) { return 0; }
+
+static int initialize_exynos_usb_cbfs_media(struct cbfs_media *media) {
+	printk(BIOS_DEBUG, "Using Exynos alternate boot mode USB A-A\n");
+
+	media->open = usb_cbfs_open;
+	media->close = alternate_cbfs_close;
+	media->read = alternate_cbfs_read;
+	media->map = alternate_cbfs_map;
+	media->unmap = alternate_cbfs_unmap;
+
+	return 0;
+}
+
+int init_default_cbfs_media(struct cbfs_media *media) {
+	if (*iram_secondary_base == SECONDARY_BASE_BOOT_USB)
+		return initialize_exynos_usb_cbfs_media(media);
+
+	/* TODO: implement SDMMC (and possibly other) boot mode */
+
+	return initialize_exynos_spi_cbfs_media(media,
+		(void*)CONFIG_CBFS_CACHE_ADDRESS, CONFIG_CBFS_CACHE_SIZE);
+}
diff --git a/src/cpu/samsung/exynos5250/alternate_cbfs.h b/src/cpu/samsung/exynos5250/alternate_cbfs.h
new file mode 100644
index 0000000..a26fe61
--- /dev/null
+++ b/src/cpu/samsung/exynos5250/alternate_cbfs.h
@@ -0,0 +1,44 @@
+/*
+ * This file is part of the coreboot project.
+ *
+ * Copyright 2013 Google Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#ifndef CPU_SAMSUNG_EXYNOS5250_ALTERNATE_CBFS_H
+#define CPU_SAMSUNG_EXYNOS5250_ALTERNATE_CBFS_H
+
+/* These are pointers to function pointers. Double indirection! */
+void * * const irom_sdmmc_read_blocks_ptr = (void * *)0x02020030;
+void * * const irom_msh_read_from_fifo_emmc_ptr = (void * *)0x02020044;
+void * * const irom_msh_end_boot_op_emmc_ptr = (void * *)0x02020048;
+void * * const irom_spi_sf_read_ptr = (void * *)0x02020058;
+void * * const irom_load_image_from_usb_ptr = (void * *)0x02020070;
+
+#define SECONDARY_BASE_BOOT_USB 0xfeed0002
+u32 * const iram_secondary_base = (u32 *)0x02020018;
+
+#if defined(__BOOT_BLOCK__)
+	/* A small space in IRAM to hold the romstage-only image */
+	void * const alternate_cbfs_buffer = (void *)CONFIG_CBFS_CACHE_ADDRESS;
+	size_t const alternate_cbfs_size = CONFIG_CBFS_CACHE_SIZE;
+#else
+	/* Just put this anywhere in RAM that's far enough from anything else */
+	/* TODO: Find a better way to "reserve" this region? */
+	void * const alternate_cbfs_buffer = (void *)0x77400000;
+	size_t const alternate_cbfs_size = 0xc00000;
+#endif
+
+#endif
diff --git a/src/cpu/samsung/exynos5250/cpu.h b/src/cpu/samsung/exynos5250/cpu.h
index 149de6a..f4ab3ed 100644
--- a/src/cpu/samsung/exynos5250/cpu.h
+++ b/src/cpu/samsung/exynos5250/cpu.h
@@ -1,189 +1,173 @@
 /*
  * This file is part of the coreboot project.
  *
  * Copyright (C) 2010 Samsung Electronics
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; version 2 of the License.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
  */
 
 #ifndef CPU_SAMSUNG_EXYNOS5250_CPU_H
 #define CPU_SAMSUNG_EXYNOS5250_CPU_H
 
 #include <arch/io.h>
 
 #define DEVICE_NOT_AVAILABLE		0
 
 #define EXYNOS_PRO_ID			0x10000000
 
-/* Address of address of function that copys data from SD or MMC */
-#define EXYNOS_COPY_MMC_FNPTR_ADDR	0x02020030
-
-/* Address of address of function that copys data from SPI */
-#define EXYNOS_COPY_SPI_FNPTR_ADDR	0x02020058
-
-/* Address of address of function that copys data through USB */
-#define EXYNOS_COPY_USB_FNPTR_ADDR	0x02020070
-
-/* Boot mode values */
-#define EXYNOS_USB_SECONDARY_BOOT	0xfeed0002
-
-#define EXYNOS_IRAM_SECONDARY_BASE	0x02020018
-
-#define EXYNOS_I2C_SPACING		0x10000
-
 /* EXYNOS5 */
 #define EXYNOS5_GPIO_PART6_BASE		0x03860000	/* Z<6:0> */
 #define EXYNOS5_PRO_ID			0x10000000
 #define EXYNOS5_CLOCK_BASE		0x10010000
 #define EXYNOS5_POWER_BASE		0x10040000
 #define EXYNOS5_SWRESET			0x10040400
 #define EXYNOS5_SYSREG_BASE		0x10050000
 #define EXYNOS5_TZPC1_DECPROT1SET	0x10110810
 #define EXYNOS5_MULTI_CORE_TIMER_BASE	0x101C0000
 #define EXYNOS5_WATCHDOG_BASE		0x101D0000
 #define EXYNOS5_ACE_SFR_BASE            0x10830000
 #define EXYNOS5_DMC_PHY0_BASE		0x10C00000
 #define EXYNOS5_DMC_PHY1_BASE		0x10C10000
 #define EXYNOS5_GPIO_PART4_BASE		0x10D10000	/* V00..V37 */
 #define EXYNOS5_GPIO_PART5_BASE		0x10D100C0	/* V40..V47 */
 #define EXYNOS5_DMC_CTRL_BASE		0x10DD0000
 #define EXYNOS5_GPIO_PART1_BASE		0x11400000	/* A00..Y67 */
 #define EXYNOS5_GPIO_PART2_BASE		0x11400c00	/* X00..X37 */
 #define EXYNOS5_USB_HOST_EHCI_BASE	0x12110000
 #define EXYNOS5_USBPHY_BASE		0x12130000
 #define EXYNOS5_USBOTG_BASE		0x12140000
 
 #define EXYNOS5_MMC_BASE		0x12200000
 #define EXYNOS5_MSHC_BASE		0x12240000
 
 #define EXYNOS5_SROMC_BASE		0x12250000
 #define EXYNOS5_UART_BASE		0x12C00000
 
 #define EXYNOS5_SPI1_BASE		0x12D30000
 #define EXYNOS5_I2C_BASE		0x12C60000
 #define EXYNOS5_SPI_BASE		0x12D20000
 #define EXYNOS5_SPI_ISP_BASE		0x131A0000
 #define EXYNOS5_I2S_BASE		0x12D60000
 #define EXYNOS5_GPIO_PART3_BASE		0x13400000	/* E00..H17 */
 #define EXYNOS5_FIMD_BASE		0x14400000
 #define EXYNOS5_DISP1_CTRL_BASE		0x14420000
 #define EXYNOS5_MIPI_DSI1_BASE		0x14500000
 
 #define EXYNOS5_ADC_BASE		DEVICE_NOT_AVAILABLE
 #define EXYNOS5_MODEM_BASE		DEVICE_NOT_AVAILABLE
 
 /* Compatibility defines */
 #define EXYNOS_POWER_BASE		EXYNOS5_POWER_BASE
 
 /* Marker values stored at the bottom of IRAM stack by SPL */
 #define EXYNOS5_SPL_MARKER	0xb004f1a9	/* hexspeak word: bootflag */
 
 /* Distance between each Trust Zone PC register set */
 #define TZPC_BASE_OFFSET		0x10000
 /* TZPC : Register Offsets */
 #define TZPC0_BASE		0x10100000
 #define TZPC1_BASE		0x10110000
 #define TZPC2_BASE		0x10120000
 #define TZPC3_BASE		0x10130000
 #define TZPC4_BASE		0x10140000
 #define TZPC5_BASE		0x10150000
 #define TZPC6_BASE		0x10160000
 #define TZPC7_BASE		0x10170000
 #define TZPC8_BASE		0x10180000
 #define TZPC9_BASE		0x10190000
 #define TZPC10_BASE		0x100E0000
 #define TZPC11_BASE		0x100F0000
 
 /*
  * TZPC Register Value :
  * R0SIZE: 0x0 : Size of secured ram
  */
 #define R0SIZE			0x0
 
 /*
  * TZPC Decode Protection Register Value :
  * DECPROTXSET: 0xFF : Set Decode region to non-secure
  */
 #define DECPROTXSET		0xFF
 
 #define samsung_get_base_adc() ((struct exynos5_adc *)EXYNOS5_ADC_BASE)
 #define samsung_get_base_clock() ((struct exynos5_clock *)EXYNOS5_CLOCK_BASE)
 #define samsung_get_base_ace_sfr() ((struct exynos5_ace_sfr *)EXYNOS5_ACE_SFR_BASE)
 #define samsung_get_base_dsim() ((struct exynos5_dsim *)EXYNOS5_MIPI_DSI1_BASE)
 #define samsung_get_base_disp_ctrl() ((struct exynos5_disp_ctrl *)EXYNOS5_DISP1_CTRL_BASE)
 #define samsung_get_base_fimd() ((struct exynos5_fimd *)EXYNOS5_FIMD_BASE)
 #define samsung_get_base_pro_id() ((struct exynos5_pro_id *)EXYNOS5_PRO_ID)
 
 #define samsung_get_base_mmc() ((struct exynos5_mmc *)EXYNOS5_MMC_BASE)
 #define samsung_get_base_mshci() ((struct exynos5_mshci *)EXYNOS5_MSHC_BASE)
 
 #define samsung_get_base_modem() ((struct exynos5_modem *)EXYNOS5_MODEM_BASE)
 #define samsung_get_base_sromc() ((struct exynos5_sromc *)EXYNOS5_SROMC_BASE)
 #define samsung_get_base_swreset() ((struct exynos5_swreset *)EXYNOS5_SWRESET)
 #define samsung_get_base_sysreg() ((struct exynos5_sysreg *)EXYNOS5_SYSREG_BASE)
 #define samsung_get_base_uart() ((struct exynos5_uart *)EXYNOS5_UART_BASE)
 #define samsung_get_base_usb_phy() ((struct exynos5_usb_phy *)EXYNOS5_USBPHY_BASE)
 #define samsung_get_base_usb_otg() ((struct exynos5_usb_otg *)EXYNOS5_USBOTG_BASE)
 #define samsung_get_base_watchdog() ((struct exynos5_watchdog *)EXYNOS5_WATCHDOG_BASE)
 #define samsung_get_base_power() ((struct exynos5_power *)EXYNOS5_POWER_BASE)
 #define samsung_get_base_i2s() ((struct exynos5_i2s *)EXYNOS5_I2S_BASE)
 #define samsung_get_base_spi1() ((struct exynos5_spi1 *)EXYNOS5_SPI1_BASE)
 #define samsung_get_base_i2c() ((struct exynos5_i2c *)EXYNOS5_I2C_BASE)
 #define samsung_get_base_spi() ((struct exynos5_spi *)EXYNOS5_SPI_BASE)
 #define samsung_get_base_spi_isp() ((struct exynos5_spi_isp *)EXYNOS5_SPI_ISP_BASE)
 
 #define EXYNOS5_SPI_NUM_CONTROLLERS	5
 #define EXYNOS_I2C_MAX_CONTROLLERS	8
 
 void exynos5250_config_l2_cache(void);
 
 extern struct tmu_info exynos5250_tmu_info;
 
 /* TODO clean up defines. */
 #define FB_SIZE_KB  4096
 #define RAM_BASE_KB (CONFIG_SYS_SDRAM_BASE >> 10)
 #define RAM_SIZE_KB (CONFIG_DRAM_SIZE_MB << 10UL)
 
 struct exynos_tzpc {
 	u32 r0size;
 	u8 res1[0x7FC];
 	u32 decprot0stat;
 	u32 decprot0set;
 	u32 decprot0clr;
 	u32 decprot1stat;
 	u32 decprot1set;
 	u32 decprot1clr;
 	u32 decprot2stat;
 	u32 decprot2set;
 	u32 decprot2clr;
 	u32 decprot3stat;
 	u32 decprot3set;
 	u32 decprot3clr;
 	u8 res2[0x7B0];
 	u32 periphid0;
 	u32 periphid1;
 	u32 periphid2;
 	u32 periphid3;
 	u32 pcellid0;
 	u32 pcellid1;
 	u32 pcellid2;
 	u32 pcellid3;
 };
 
 static inline u32 get_fb_base_kb(void)
 {
 	return RAM_BASE_KB + RAM_SIZE_KB - FB_SIZE_KB;
 }
 
 #endif	/* _EXYNOS5250_CPU_H */
diff --git a/src/cpu/samsung/exynos5250/pinmux.c b/src/cpu/samsung/exynos5250/pinmux.c
index b5406af..89ce23e 100644
--- a/src/cpu/samsung/exynos5250/pinmux.c
+++ b/src/cpu/samsung/exynos5250/pinmux.c
@@ -1,265 +1,268 @@
 /*
  * This file is part of the coreboot project.
  *
  * Copyright (C) 2012 Samsung Electronics
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; version 2 of the License.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
  */
 
 #include <console/console.h>
 #include <assert.h>
 #include "gpio.h"
 #include "cpu.h"
 #include "pinmux.h"
 
 static void exynos_pinmux_uart(int start, int count)
 {
 	int i;
 
 	for (i = start; i < start + count; i++) {
 		gpio_set_pull(i, GPIO_PULL_NONE);
 		gpio_cfg_pin(i, GPIO_FUNC(0x2));
 	}
 }
 
 void exynos_pinmux_uart0(void)
 {
 	exynos_pinmux_uart(GPIO_A00, 4);
 }
 
 void exynos_pinmux_uart1(void)
 {
 	exynos_pinmux_uart(GPIO_D00, 4);
 }
 
 void exynos_pinmux_uart2(void)
 {
 	exynos_pinmux_uart(GPIO_A10, 4);
 }
 
 void exynos_pinmux_uart3(void)
 {
 	exynos_pinmux_uart(GPIO_A14, 2);
 }
 
 static void exynos_pinmux_sdmmc(int start, int start_ext)
 {
 	int i;
 
 	if (start_ext) {
 		for (i = 0; i <= 3; i++) {
 			gpio_cfg_pin(start_ext + i, GPIO_FUNC(0x2));
 			gpio_set_pull(start_ext + i, GPIO_PULL_UP);
 			gpio_set_drv(start_ext + i, GPIO_DRV_4X);
 		}
 	}
 	for (i = 0; i < 2; i++) {
 		gpio_cfg_pin(start + i, GPIO_FUNC(0x2));
 		gpio_set_pull(start + i, GPIO_PULL_NONE);
 		gpio_set_drv(start + i, GPIO_DRV_4X);
 	}
 	for (i = 2; i <= 6; i++) {
 		gpio_cfg_pin(start + i, GPIO_FUNC(0x2));
 		gpio_set_pull(start + i, GPIO_PULL_UP);
 		gpio_set_drv(start + i, GPIO_DRV_4X);
 	}
 }
 
 void exynos_pinmux_sdmmc0(void)
 {
 	exynos_pinmux_sdmmc(GPIO_C00, GPIO_C10);
 }
 
 void exynos_pinmux_sdmmc1(void)
 {
 	exynos_pinmux_sdmmc(GPIO_C20, 0);
 }
 
 void exynos_pinmux_sdmmc2(void)
 {
 	exynos_pinmux_sdmmc(GPIO_C30, 0);
 }
 
 void exynos_pinmux_sdmmc3(void)
 {
 	/*
 	 * TODO: Need to add definitions for GPC4 before
 	 * enabling this.
 	 */
 	printk(BIOS_DEBUG, "SDMMC3 not supported yet");
 }
 
 void exynos_pinmux_sromc(int bank, int sixteen_bit)
 {
 	int i;
 
 	if (bank > 3) {
 		printk(BIOS_DEBUG, "Unsupported sromc bank %d.\n", bank);
 		return;
 	}
 
 	gpio_cfg_pin(GPIO_Y00 + bank, GPIO_FUNC(2));
 	gpio_cfg_pin(GPIO_Y04, GPIO_FUNC(2));
 	gpio_cfg_pin(GPIO_Y05, GPIO_FUNC(2));
 
 	for (i = 2; i < 4; i++)
 		gpio_cfg_pin(GPIO_Y10 + i, GPIO_FUNC(2));
 
 	for (i = 0; i < 8; i++) {
 		gpio_cfg_pin(GPIO_Y30 + i, GPIO_FUNC(2));
 		gpio_set_pull(GPIO_Y30 + i, GPIO_PULL_UP);
 
 		gpio_cfg_pin(GPIO_Y50 + i, GPIO_FUNC(2));
 		gpio_set_pull(GPIO_Y50 + i, GPIO_PULL_UP);
 
 		if (sixteen_bit) {
 			gpio_cfg_pin(GPIO_Y60 + i, GPIO_FUNC(2));
 			gpio_set_pull(GPIO_Y60 + i, GPIO_PULL_UP);
 		}
 	}
 }
 
 static void exynos_pinmux_spi(int start, int cfg)
 {
 	int i;
 
-	for (i = 0; i < 4; i++)
+	for (i = 0; i < 4; i++) {
 		gpio_cfg_pin(start + i, GPIO_FUNC(cfg));
+		gpio_set_pull(start + i, GPIO_PULL_NONE);
+		gpio_set_drv(start + i, GPIO_DRV_3X);
+	}
 }
 
 void exynos_pinmux_spi0(void)
 {
 	exynos_pinmux_spi(GPIO_A20, 0x2);
 }
 
 void exynos_pinmux_spi1(void)
 {
 	exynos_pinmux_spi(GPIO_A24, 0x2);
 }
 
 void exynos_pinmux_spi2(void)
 {
 	exynos_pinmux_spi(GPIO_B11, 0x5);
 }
 
 void exynos_pinmux_spi3(void)
 {
 	exynos_pinmux_spi(GPIO_E00, 0x2);
 }
 
 void exynos_pinmux_spi4(void)
 {
 	int i;
 
 	for (i = 0; i < 2; i++)
 		gpio_cfg_pin(GPIO_F02 + i, GPIO_FUNC(0x4));
 	for (i = 2; i < 4; i++)
 		gpio_cfg_pin(GPIO_E02 + i, GPIO_FUNC(0x4));
 }
 
 void exynos_pinmux_backlight(void)
 {
 	gpio_cfg_pin(GPIO_B20, GPIO_OUTPUT);
 	gpio_set_value(GPIO_B20, 1);
 }
 
 void exynos_pinmux_lcd(void)
 {
 	gpio_cfg_pin(GPIO_Y25, GPIO_OUTPUT);
 	gpio_set_value(GPIO_Y25, 1);
 	gpio_cfg_pin(GPIO_X15, GPIO_OUTPUT);
 	gpio_set_value(GPIO_X15, 1);
 	gpio_cfg_pin(GPIO_X30, GPIO_OUTPUT);
 	gpio_set_value(GPIO_X30, 1);
 }
 
 static void exynos_pinmux_i2c(int start, int func)
 {
 	gpio_cfg_pin(start, GPIO_FUNC(func));
 	gpio_cfg_pin(start + 1, GPIO_FUNC(func));
 	gpio_set_pull(start, GPIO_PULL_NONE);
 	gpio_set_pull(start + 1, GPIO_PULL_NONE);
 }
 
 void exynos_pinmux_i2c0(void)
 {
 	exynos_pinmux_i2c(GPIO_B30, 0x2);
 }
 
 void exynos_pinmux_i2c1(void)
 {
 	exynos_pinmux_i2c(GPIO_B32, 0x2);
 }
 
 void exynos_pinmux_i2c2(void)
 {
 	exynos_pinmux_i2c(GPIO_A06, 0x3);
 }
 
 void exynos_pinmux_i2c3(void)
 {
 	exynos_pinmux_i2c(GPIO_A12, 0x3);
 }
 
 void exynos_pinmux_i2c4(void)
 {
 	exynos_pinmux_i2c(GPIO_A20, 0x3);
 }
 
 void exynos_pinmux_i2c5(void)
 {
 	exynos_pinmux_i2c(GPIO_A22, 0x3);
 }
 
 void exynos_pinmux_i2c6(void)
 {
 	exynos_pinmux_i2c(GPIO_B13, 0x4);
 }
 
 void exynos_pinmux_i2c7(void)
 {
 	exynos_pinmux_i2c(GPIO_B22, 0x3);
 }
 
 void exynos_pinmux_dphpd(void)
 {
 	/* Set Hotplug detect for DP */
 	gpio_cfg_pin(GPIO_X07, GPIO_FUNC(0x3));
 
 	/*
 	 * Hotplug detect should have an external pullup; disable the
 	 * internal pulldown so they don't fight.
 	 */
 	gpio_set_pull(GPIO_X07, GPIO_PULL_NONE);
 }
 
 void exynos_pinmux_i2s0(void)
 {
 	int i;
 
 	for (i = 0; i < 5; i++) {
 		gpio_cfg_pin(GPIO_Z0 + i, GPIO_FUNC(0x02));
 		gpio_set_pull(GPIO_Z0 + i, GPIO_PULL_NONE);
 	}
 }
 
 void exynos_pinmux_i2s1(void)
 {
 	int i;
 
 	for (i = 0; i < 5; i++) {
 		gpio_cfg_pin(GPIO_B00 + i, GPIO_FUNC(0x02));
 		gpio_set_pull(GPIO_B00 + i, GPIO_PULL_NONE);
 	}
 }
diff --git a/src/cpu/samsung/exynos5250/spi.c b/src/cpu/samsung/exynos5250/spi.c
index 1c365dc..e8b68b4 100644
--- a/src/cpu/samsung/exynos5250/spi.c
+++ b/src/cpu/samsung/exynos5250/spi.c
@@ -1,223 +1,216 @@
 /*
  * This file is part of the coreboot project.
  *
  * Copyright (C) 2011 Samsung Electronics
  * Copyright 2013 Google Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; version 2 of the License.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
  */
 
 #include <console/console.h>
 #include <arch/io.h>
 #include <stdlib.h>
 #include <assert.h>
 #include "gpio.h"
 #include "clk.h"
 #include "spi.h"
 
 #define OM_STAT		(0x1f << 1)
 #define EXYNOS_BASE_SPI1 ((void *)0x12d30000)
 
 #if defined(CONFIG_DEBUG_SPI) && CONFIG_DEBUG_SPI
 # define DEBUG_SPI(x,...)	printk(BIOS_DEBUG, "EXYNOS_SPI: " x)
 #else
 # define DEBUG_SPI(x,...)
 #endif
 
 static void exynos_spi_rx_tx(struct exynos_spi *regs, int todo,
 			     void *dinp, void const *doutp, int i)
 {
 	int rx_lvl, tx_lvl;
 	unsigned int *rxp = (unsigned int *)(dinp + (i * (32 * 1024)));
 	unsigned int out_bytes, in_bytes;
 
 	// TODO In current implementation, every read/write must be aligned to
 	// 4 bytes, otherwise you may get timeout or other unexpected results.
 	ASSERT(todo % 4 == 0);
 
 	out_bytes = in_bytes = todo;
 	setbits_le32(&regs->ch_cfg, SPI_CH_RST);
 	clrbits_le32(&regs->ch_cfg, SPI_CH_RST);
 	writel(((todo * 8) / 32) | SPI_PACKET_CNT_EN, &regs->pkt_cnt);
 
 	while (in_bytes) {
 		uint32_t spi_sts;
 		int temp;
 
 		spi_sts = readl(&regs->spi_sts);
 		rx_lvl = ((spi_sts >> 15) & 0x7f);
 		tx_lvl = ((spi_sts >> 6) & 0x7f);
 		while (tx_lvl < 32 && out_bytes) {
 			// TODO The "writing" (tx) is not supported now; that's
 			// why we write garbage to keep driving FIFO clock.
 			temp = 0xffffffff;
 			writel(temp, &regs->tx_data);
 			out_bytes -= 4;
 			tx_lvl += 4;
 		}
 		while (rx_lvl >= 4 && in_bytes) {
 			temp = readl(&regs->rx_data);
 			if (rxp)
 				*rxp++ = temp;
 			in_bytes -= 4;
 			rx_lvl -= 4;
 		}
 	}
 }
 
 /* set up SPI channel */
 int exynos_spi_open(struct exynos_spi *regs)
 {
 	/* set the spi1 GPIO */
 
 	/* set pktcnt and enable it */
 	writel(4 | SPI_PACKET_CNT_EN, &regs->pkt_cnt);
 	/* set FB_CLK_SEL */
 	writel(SPI_FB_DELAY_180, &regs->fb_clk);
 	/* set CH_WIDTH and BUS_WIDTH as word */
 	setbits_le32(&regs->mode_cfg,
 		     SPI_MODE_CH_WIDTH_WORD | SPI_MODE_BUS_WIDTH_WORD);
 	clrbits_le32(&regs->ch_cfg, SPI_CH_CPOL_L); /* CPOL: active high */
 
 	/* clear rx and tx channel if set previously */
 	clrbits_le32(&regs->ch_cfg, SPI_RX_CH_ON | SPI_TX_CH_ON);
 
 	setbits_le32(&regs->swap_cfg,
 		     SPI_RX_SWAP_EN | SPI_RX_BYTE_SWAP | SPI_RX_HWORD_SWAP);
 
 	/* do a soft reset */
 	setbits_le32(&regs->ch_cfg, SPI_CH_RST);
 	clrbits_le32(&regs->ch_cfg, SPI_CH_RST);
 
 	/* now set rx and tx channel ON */
 	setbits_le32(&regs->ch_cfg, SPI_RX_CH_ON | SPI_TX_CH_ON | SPI_CH_HS_EN);
 	return 0;
 }
 
 int exynos_spi_read(struct exynos_spi *regs, void *dest, u32 len, u32 off)
 {
 	int upto, todo;
 	int i;
 	clrbits_le32(&regs->cs_reg, SPI_SLAVE_SIG_INACT); /* CS low */
 
 	/* Send read instruction (0x3h) followed by a 24 bit addr */
 	writel((SF_READ_DATA_CMD << 24) | off, &regs->tx_data);
 
 	/* waiting for TX done */
 	while (!(readl(&regs->spi_sts) & SPI_ST_TX_DONE));
 
 	for (upto = 0, i = 0; upto < len; upto += todo, i++) {
 		todo = MIN(len - upto, (1 << 15));
 		exynos_spi_rx_tx(regs, todo, dest, (void *)(off), i);
 	}
 
 	setbits_le32(&regs->cs_reg, SPI_SLAVE_SIG_INACT);/* make the CS high */
 
 	return len;
 }
 
 int exynos_spi_close(struct exynos_spi *regs)
 {
 	/*
 	 * Let put controller mode to BYTE as
 	 * SPI driver does not support WORD mode yet
 	 */
 	clrbits_le32(&regs->mode_cfg,
 		     SPI_MODE_CH_WIDTH_WORD | SPI_MODE_BUS_WIDTH_WORD);
 	writel(0, &regs->swap_cfg);
 
 	/*
 	 * Flush spi tx, rx fifos and reset the SPI controller
 	 * and clear rx/tx channel
 	 */
 	clrsetbits_le32(&regs->ch_cfg, SPI_CH_HS_EN, SPI_CH_RST);
 	clrbits_le32(&regs->ch_cfg, SPI_CH_RST);
 	clrbits_le32(&regs->ch_cfg, SPI_TX_CH_ON | SPI_RX_CH_ON);
 	return 0;
 }
 
 // SPI as CBFS media.
 struct exynos_spi_media {
 	struct exynos_spi *regs;
 	struct cbfs_simple_buffer buffer;
 };
 
 static int exynos_spi_cbfs_open(struct cbfs_media *media) {
 	struct exynos_spi_media *spi = (struct exynos_spi_media*)media->context;
 	DEBUG_SPI("exynos_spi_cbfs_open\n");
 	return exynos_spi_open(spi->regs);
 }
 
 static int exynos_spi_cbfs_close(struct cbfs_media *media) {
 	struct exynos_spi_media *spi = (struct exynos_spi_media*)media->context;
 	DEBUG_SPI("exynos_spi_cbfs_close\n");
 	return exynos_spi_close(spi->regs);
 }
 
 static size_t exynos_spi_cbfs_read(struct cbfs_media *media, void *dest,
 				   size_t offset, size_t count) {
 	struct exynos_spi_media *spi = (struct exynos_spi_media*)media->context;
 	int bytes;
 	DEBUG_SPI("exynos_spi_cbfs_read(%u)\n", count);
 	bytes = exynos_spi_read(spi->regs, dest, count, offset);
 	// Flush and re-open the device.
 	exynos_spi_close(spi->regs);
 	exynos_spi_open(spi->regs);
 	return bytes;
 }
 
 static void *exynos_spi_cbfs_map(struct cbfs_media *media, size_t offset,
 				 size_t count) {
 	struct exynos_spi_media *spi = (struct exynos_spi_media*)media->context;
 	DEBUG_SPI("exynos_spi_cbfs_map\n");
 	// See exynos_spi_rx_tx for I/O alignment limitation.
 	if (count % 4)
 		count += 4 - (count % 4);
 	return cbfs_simple_buffer_map(&spi->buffer, media, offset, count);
 }
 
 static void *exynos_spi_cbfs_unmap(struct cbfs_media *media,
 				   const void *address) {
 	struct exynos_spi_media *spi = (struct exynos_spi_media*)media->context;
 	DEBUG_SPI("exynos_spi_cbfs_unmap\n");
 	return cbfs_simple_buffer_unmap(&spi->buffer, address);
 }
 
 int initialize_exynos_spi_cbfs_media(struct cbfs_media *media,
 				     void *buffer_address,
 				     size_t buffer_size) {
 	// TODO Replace static variable to support multiple streams.
 	static struct exynos_spi_media context;
 	DEBUG_SPI("initialize_exynos_spi_cbfs_media\n");
 
 	context.regs = EXYNOS_BASE_SPI1;
 	context.buffer.allocated = context.buffer.last_allocate = 0;
 	context.buffer.buffer = buffer_address;
 	context.buffer.size = buffer_size;
 	media->context = (void*)&context;
 	media->open = exynos_spi_cbfs_open;
 	media->close = exynos_spi_cbfs_close;
 	media->read = exynos_spi_cbfs_read;
 	media->map = exynos_spi_cbfs_map;
 	media->unmap = exynos_spi_cbfs_unmap;
 
 	return 0;
 }
-
-int init_default_cbfs_media(struct cbfs_media *media) {
-	return initialize_exynos_spi_cbfs_media(
-			media,
-			(void*)CONFIG_CBFS_CACHE_ADDRESS,
-			CONFIG_CBFS_CACHE_SIZE);
-}
diff --git a/src/mainboard/google/snow/romstage.c b/src/mainboard/google/snow/romstage.c
index 92fa21e..d45b861 100644
--- a/src/mainboard/google/snow/romstage.c
+++ b/src/mainboard/google/snow/romstage.c
@@ -1,190 +1,191 @@
 /*
  * This file is part of the coreboot project.
  *
  * Copyright (C) 2012 The ChromiumOS Authors.  All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; version 2 of the License.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
  */
 
 #include <types.h>
 
 #include <armv7.h>
 #include <cbfs.h>
 #include <cbmem.h>
 
 #include <arch/cache.h>
 #include <cpu/samsung/exynos5250/i2c.h>
 #include <cpu/samsung/exynos5250/clk.h>
 #include <cpu/samsung/exynos5250/cpu.h>
 #include <cpu/samsung/exynos5250/dmc.h>
 #include <cpu/samsung/exynos5250/gpio.h>
 #include <cpu/samsung/exynos5250/setup.h>
 #include <cpu/samsung/exynos5250/periph.h>
 #include <cpu/samsung/exynos5250/power.h>
 #include <cpu/samsung/exynos5250/wakeup.h>
 #include <console/console.h>
 #include <arch/stages.h>
 
 #include <drivers/maxim/max77686/max77686.h>
 #include <device/i2c.h>
 
 #include "exynos5250.h"
 
 #define PMIC_BUS	0
 #define MMC0_GPIO_PIN	(58)
 
 static void setup_power(int is_resume)
 {
 	int error = 0;
 
 	power_init();
 
 	if (is_resume) {
 		return;
 	}
 
 	/* Initialize I2C bus to configure PMIC. */
 	exynos_pinmux_i2c0();
 	i2c_init(0, I2C_0_SPEED, 0x00);
 
 	printk(BIOS_DEBUG, "%s: Setting up PMIC...\n", __func__);
 	/*
 	 * We're using CR1616 coin cell battery that is non-rechargeable
 	 * battery. But, BBCHOSTEN bit of the BBAT Charger Register in
 	 * MAX77686 is enabled by default for charging coin cell.
 	 *
 	 * Also, we cannot meet the coin cell reverse current spec. in UL
 	 * standard if BBCHOSTEN bit is enabled.
 	 *
 	 * Disable Coin BATT Charging
 	 */
 	error = max77686_disable_backup_batt(PMIC_BUS);
 
 	error |= max77686_volsetting(PMIC_BUS, PMIC_BUCK2, VDD_ARM_MV,
 						REG_ENABLE, MAX77686_MV);
 	error |= max77686_volsetting(PMIC_BUS, PMIC_BUCK3, VDD_INT_UV,
 						REG_ENABLE, MAX77686_UV);
 	error |= max77686_volsetting(PMIC_BUS, PMIC_BUCK1, VDD_MIF_MV,
 						REG_ENABLE, MAX77686_MV);
 	error |= max77686_volsetting(PMIC_BUS, PMIC_BUCK4, VDD_G3D_MV,
 						REG_ENABLE, MAX77686_MV);
 	error |= max77686_volsetting(PMIC_BUS, PMIC_LDO2, VDD_LDO2_MV,
 						REG_ENABLE, MAX77686_MV);
 	error |= max77686_volsetting(PMIC_BUS, PMIC_LDO3, VDD_LDO3_MV,
 						REG_ENABLE, MAX77686_MV);
 	error |= max77686_volsetting(PMIC_BUS, PMIC_LDO5, VDD_LDO5_MV,
 						REG_ENABLE, MAX77686_MV);
 	error |= max77686_volsetting(PMIC_BUS, PMIC_LDO10, VDD_LDO10_MV,
 						REG_ENABLE, MAX77686_MV);
 
 	error |= max77686_enable_32khz_cp(PMIC_BUS);
 
 	if (error) {
 		printk(BIOS_CRIT, "%s: PMIC error: %#x\n", __func__, error);
 		die("Failed to intialize PMIC.\n");
 	}
 }
 
 static void setup_storage(void)
 {
 	/* MMC0: Fixed, 8 bit mode, connected with GPIO. */
 	if (clock_set_mshci(PERIPH_ID_SDMMC0))
 		printk(BIOS_CRIT, "%s: Failed to set MMC0 clock.\n", __func__);
 	if (gpio_direction_output(MMC0_GPIO_PIN, 1)) {
 		printk(BIOS_CRIT, "%s: Unable to power on MMC0.\n", __func__);
 	}
 	gpio_set_pull(MMC0_GPIO_PIN, GPIO_PULL_NONE);
 	gpio_set_drv(MMC0_GPIO_PIN, GPIO_DRV_4X);
 	exynos_pinmux_sdmmc0();
 
 	/* MMC2: Removable, 4 bit mode, no GPIO. */
 	clock_set_mshci(PERIPH_ID_SDMMC2);
 	exynos_pinmux_sdmmc2();
 }
 
 static void setup_graphics(void)
 {
 	exynos_pinmux_dphpd();
 }
 
 static void setup_gpio(void)
 {
 	gpio_direction_input(GPIO_D16); // WP_GPIO
 	gpio_set_pull(GPIO_D16, GPIO_PULL_NONE);
 
 	gpio_direction_input(GPIO_Y10); // RECMODE_GPIO
 	gpio_set_pull(GPIO_Y10, GPIO_PULL_NONE);
 
 	gpio_direction_input(GPIO_X35); // LID_GPIO
 	gpio_set_pull(GPIO_X35, GPIO_PULL_NONE);
 
 	gpio_direction_input(GPIO_X13); // POWER_GPIO
 	gpio_set_pull(GPIO_X13, GPIO_PULL_NONE);
 }
 
 static void setup_memory(struct mem_timings *mem, int is_resume)
 {
 	printk(BIOS_SPEW, "man: 0x%x type: 0x%x, div: 0x%x, mhz: %d\n",
 	       mem->mem_manuf,
 	       mem->mem_type,
 	       mem->mpll_mdiv,
 	       mem->frequency_mhz);
 
 	if (ddr3_mem_ctrl_init(mem, DMC_INTERLEAVE_SIZE, !is_resume)) {
 		die("Failed to initialize memory controller.\n");
 	}
 }
 
 static struct mem_timings *setup_clock(void)
 {
 	struct mem_timings *mem = get_mem_timings();
 	struct arm_clk_ratios *arm_ratios = get_arm_clk_ratios();
 	if (!mem) {
 		die("Unable to auto-detect memory timings\n");
 	}
 	system_clock_init(mem, arm_ratios);
 	return mem;
 }
 
 void main(void)
 {
 	struct mem_timings *mem;
 	void *entry;
 	int is_resume = (get_wakeup_state() != IS_NOT_WAKEUP);
 
 	/* Clock must be initialized before console_init, otherwise you may need
 	 * to re-initialize serial console drivers again. */
 	mem = setup_clock();
 
 	console_init();
 
 	setup_power(is_resume);
 	setup_memory(mem, is_resume);
 
 	if (is_resume) {
 		wakeup();
 	}
 
 	setup_storage();
 	setup_gpio();
 	setup_graphics();
 
-	/* Set SPI (primary CBFS media) clock to 50MHz. */
+	/* Set SPI (primary CBFS media) clock to 50MHz and configure pinmux. */
+	exynos_pinmux_spi1();
 	clock_set_rate(PERIPH_ID_SPI1, 50000000);
 
 	cbmem_initialize_empty();
 
 	entry = cbfs_load_stage(CBFS_DEFAULT_MEDIA, "fallback/coreboot_ram");
 	stage_exit(entry);
 }
