2000-06-07 20:38:15 +0000
diff --git a/Changelog b/Changelog
index 50b28cf..493401d 100644
--- a/Changelog
+++ b/Changelog
@@ -1,626 +1,628 @@
 0.44
 	* Added BB_FEATURE_TRIVIAL_HELP which compiles out most all of the
 	    help messages (i.e --help).  Saves 17k over a full compile.
 	* Added mktemp, contributed by Daniel Jacobowitz <dan@debian.org>
 	* Added setkeycodes, for those that have wierd keyboard buttons.
 	* Added cut and tr from minix, since due to the license change, 
 	    we can now use minix code.  Minix tr saves 4k. 
 	* Added a mini ar archive utility, especially written for BusyBox by 
 	    Glenn McGrath <bug1@netconnect.com.au>
         * Added 'grep -v' option (inverted search) and updated 
 	    docs accordingly.  -beppu
 	* Wrote which
 	* BusyBox sh (lash) now supports being used as a standalone shell.  When
 	    BB_FEATURE_STANDALONE_SHELL is defined, all the busybox commands may
 	    be invoked as shell internals.  Best used when compiling staticly 
 	    (i.e. DOSTATIC=true)
 	* BusyBox sh (lash) internals now behave as expected wrt pipes 
 	    and redirects. 
 	* Fixed ping warnings -- fix from Sascha Ziemann <szi@aibon.ping.de>
 	* Fixed update segfault
 	* Fixed mknod -- minor number was always 0
 	* Fixed tar option parsing, so both "tar xvf foo.tar" and 
 	    "tar -xvf foo.tar" now work (i.e. no "-" before options) 
 	    (this was very broken in 0.43).
 	* Several contributions from Randolph Chung <tausq@debian.org>.
 	    * cp/mv now accepts the -f flag
 	    * tail can now accept -<num> commands (e.g. -10) for better 
 		compatibility with the standard tail command
 	    * added a simple id implementation; doesn't support sup. groups yet
 	* logname used getlogin(3) which uses utmp.  Now it doesn't. 
 	* whoami used getpwuid(3) which uses libc NSS.  Now it behaves. 
 	* Add support for "noatime" and "nodiratime" mount flags to mount.
 	* Changed 'umount -f' to mean force, and actually use umount2.
 	* Changed 'umount -l' to mean "Do not free loop device".
 	* Fixed basename to support stripping of suffixes.  Patch thanks
 	    to xiong jianxin <jxiong@uiuc.edu>
 	* cp -fa now works as expected for symlinks (it didn't before)
 	* zcat now works (wasn't working since option parsing was broken)
 	* Renamed "mnc" to the more correct "nc" (for netcat).
 	* Makefile intelligence updates
 	* Changed the way init parses /etc/inittab entries to avoid problems
 	    with commands that contain colons in them.  Fix thanks to 
 	    Pavel Roskin <pavel_roskin@geocities.com>
 	* Fixed a warning in utility.c due to char being unsigned on Linux/PPC, 
 	    Fix thanks to Pavel Roskin <pavel_roskin@geocities.com>
 	* Made "killall" complain (not error and exit) about processes that it 
 	    cannot find by name. Fix thanks to Pavel Roskin <pavel_roskin@geocities.com> 
 	* Fixed more and ps to have sensible terminal width defaults, thanks 
 	    to Pavel Roskin.
 	* Fixed all fatalError() calls lacking a "\n", thanks to Pavel Roskin.
 	* Fixed a segfault in yes when no args were given -- Pavel Roskin.
 	* Simplified freeramdisk and added argument checking -- Pavel Roskin. 
 	* Fixed segfault caused by "touch -c"
 	* Fixed segfault caused by "rm -f"
 	* Fixed segfault caused by "ln -s -s" and similar abuses.
 	* Fixed segfault caused by "cp -a -a" and similar abuses.
 	* Implemented "rm -- <foo>"
 	* "which" rewritten to use stat(). Fixes to improve its compatability
 	    with traditional implementations -- Pavel Roskin.
 	* "mount" now reports errors from nfsmount() and assumes NFS mount
 	    if ':' is present in the device name - Pavel Roskin
 	* Fixed exit status for killall - Pavel Roskin
 	* Fixed 'swapon -a' and 'swapoff -a', which were broken.
 	* Fixed 'mount -a' so it works as expected.
 	* Implemented 'ls -R' (enabled by enabling BB_FEATURE_LS_RECURSIVE)
+	* Implemented "ping -s", fixed error messages and argument parsing -
+	    Pavel Roskin
 	* More doc updates
 
 
 	 -Erik Andersen
 
 
 
 0.43
 	* Major update to the provided documentation.
 	* Busybox now includes a shell!  It currently costs 7.5 k (plus an
 	    additional 2.5 k if you compile in command line editing).  Handles
 	    job control, has the usual set of builtins, and does everything
 	    except for handling programming statements (if, while, etc...)
 	* Busybox can now work perfectly when /proc is disabled, thereby 
 	    saving a bunch of memory (kernel /proc support is not thin).  This
 	    is done by making use of some nice kernel patches I wrote up to
 	    support the features that busybox requires and that /proc usually
 	    provides.  To enable this, turn on BB_FEATURE_USE_DEVPS_PATCH and
 	    patch your kernel with the devps patch in the kernel-patches/
 	    directory. 
 	* Wrote basename, dirname, killall, and uptime.
 	* tar has been completely rewritten by me.  Both tar creation and 
 	    extraction are now well behaved.  Costs 7.6k with all optional
 	    tar features enabled, and 5k for just tar extraction support. 
 	* Added freeramdisk, which will free up all memory associated
 	    with a ram disk.  Contributed by Emanuele Caratti <wiz@iol.it>
 	    and then adjusted a bit by me.
 	* Added tr from John Lombardo <john@deltanet.com> 
 	* Added echo and test (from me).
 	* Added usleep contributed by Nicolas Pitre <nico@cam.org>
 	* BusyBox's bss size has been majorly reduced (was 384668, is now 28740).
 	* Several fixes from Pavel Roskin <pavel_roskin@geocities.com>:
 	    - When `tail' fails to open a file it now exits.
 	    - When `syslogd' is given the `-n' option it should still use 
 		fork() for running klogd.
 	* nslookup types are now changed to u_int32_t (instead of uint32_t)
 	    changed per a patch from Pascal Bellard <pascal.bellard@ascend.com>
 	* Fixed "du" so it gives the same answers as GNU "du" (busybox du used 
 	    to count hard-linked files more then once).  Many thanks to 
 	    Friedrich Vedder <fwv@myrtle.lahn.de> for the fix.
 	* Removed /proc dependancies for init and free (while maintaining 
 	    exactly the same functionality).  /proc takes up 90k of kernel 
 	    space, so it is nice to avoid using it at all costs.
 	* init no longer tries to mount /proc (unless there is less the 1 meg 
 	    free).  Use of /proc (or not) is policy that should be set up in 
 	    /etc/fstab (or in hardcoded scripts), not in init.
 	* Fixed rebooting when init runs as an initrd.
 	* Fixes and updates from Karl M. Hegbloom  <karlheg@debian.org>
 	    - update.c rewritten to look more like update-2.11
 	    - moveed the inode hash out of du.c and into utility.c to make 
 		it a common resource that can be used by other apps.
 	    - cp_mv.c now checks inodes to see if a source and dest are
 		the same, and prints an error (instead of endlessly looping).
 	    - mv now attempts to do a rename, and will fall back to doing
 		a copy only if the rename fails.
 	    - Syslogd now supports multiple concurrent connections
 	* Several fixes from Pavel Roskin <pavel_roskin@geocities.com>:
 	    - Fixes to sort.  Removed "-g", fixed and added "-r"
 	    - Fixes to the makefile for handling "strip"
 	* An initial telnet implementation was added by 
 	    Randolph Chung <tausq@debian.org>.
 	* Fixed a bug where "sed 's/foo/bar/g'" (i.e. a script w/o a "-e")
 	* ps now supports BB_FEATURE_AUTOWIDTH, and can adjust its width
 	    to match the terminal (defaults to width=79 when this is off).
 	* ps now accepts (and ignores) all options except for "--help" (which
 		as would be expected displays help).
 	* Fixed mount'ing loop devices when the filesystem type was not 
 	    specified.  It used to revert to non-loop after the first try.
 	* all mallocs now use xmalloc (and so are OOM error safe), and
 	    the common error handling saves a few bytes.  Thanks to 
 	    Bob Tinsley <bob@earthrise.demon.co.uk> for the patch.
 	* Fix "+" parsing bug in date, from "Merle F. McClelland" <mfm@cts.com>.
 	* Fix symlink following bug in chmod -R and friends.  
 	* Now allows SYSV style 'chown foo:bar' in addition to 'chown foo.bar'
 	* Fixed a bug in the busybox globbing routine such that 'find /dir -name [i]' 
 	    no longer segfaults.
 
 
 	-Erik Andersen
 
 
 0.42
 
         * Fairly massive restructuring of umount.c to deal with remounting 
 	  busy devices read-only. Adds a -r option to control that; it is 
 	  optionally compiled in with BB_FEATURE_REMOUNT
 	* Added a bunch of functions to mtab.c to interact with the
 	  {get,set,end}mntent interface; as it turns out, those functions do
 	  not appear to be re-entrant, and that causes a lot of problems with
 	  the way umount was originally written.
 	* Makes init send TERM and KILL (instead of HUP and KILL) on reboot
 	  to be more consistent with sysvinit
 	* Changes to init.c to use the new -r option to umount. Also increased
 	  the sleep time between the time the TERM and KILL signals are sent
 
         - Randolph Chung
 
 
 	* cp.c, mv.c: removed, replaced by cp_mv.c which has been
 	    extensively rewritten from the original cp.c.
 	* Fixed cp and mv so if the source and destination are a the
 	    same directory it will print an error and continue.
 	* Also added a warning message to the `mv' usage string saying that
 	    this is not GNU mv, and it will break hard links. cp also breaks
 	    hard links.
 	* ln.c: implemented `-n' switch, no-deref symlinks.
 	* include<sys/param.h>: and use PATH_MAX everywhere.  busybox: File
 	* name buffer overrun guards to prevent future crashes.
 	    - Always check exit status.
 	    - Purge all use of `creat()', replace with `open()'.
 	* utility.c 
 	    - recursiveAction was overriding the value of followLinks thus
 	      ignoring it.
 	    - isDirectory now takes a followLinks boolean, updated all callers
 	    - copyFile had the followLinks logic reversed.
 	* messages.c: New file. Put common error message strings all in
 	    one place in an attempt to shrink the binary a little.
 
 	-Karl M. Hegbloom
 
 
 	* changed fsck_minix.c to reduce its .bss size significantly
 	  -beppu -piptigger
 	* Made tar creation support in busybox tar optional.  You no longer
 	* _have_ to put a "-" in front of tar options.  Tar could inadvertently
 	* change permissions and ownership on
 	    certain directories pointed to by symlinks.
 	* Made grep and grep -h do the right thing wrt printing
 	    the file name (it failed to print files names in many cases).
 	* Fix a namespace aliasing problem wereby if du was built in, the 
 	    symlink for both du and dutmp would be installed, or then rm was
 	    built in, the symlinks for both rm and rmmod would be installed.
 	* Added a closelog() to init.c after loging -- fix thanks to 
 	    Taketoshi Sano <kgh12351@nifty.ne.jp>
 	* Rewrote and simplified logger.  Added the "-t" option, and made it
 	    behave itself a bit better.
 	* Optional support contributed by Ben Collins <bcollins@debian.org> 
 	    for the kernel init chroot patch by Werner Almesberger, which
 	    allows init to chroot to a new device, and umount the old one.
 	* Fixed bug that wouldn't let one chown a symlink -- it would
 	    always dereference before.  -beppu
 	* Fixed a bug where init could have reference already freed memory.
 	    Found and fixed by Taketoshi Sano <kgh12351@nifty.ne.jp>
 	* Several contributions from Friedrich Vedder <fwv@myrtle.lahn.de>
 	* Added (and documented) "-n" option for head
 	* Cleanup for a number of usage messages -- also 
 	    contributed Friedrich Vedder <fwv@myrtle.lahn.de>
 	* Cosmetic fix to busybox.c (Don't print a comma at the
 	    end of line if there are no more application names).
 	* Fixed a stupid bug in "head" option handling ("head -n" 
 	    would segfault).
 	* Moved commonly used functions "xmalloc()" and "exit()"
 	    to utility.c (with proper #ifdef's).
 	* Created a tiny tail implementation, removing -c, -q, -v, and making
 	    tail -f work only with a single file.  This reduced tail from 6k to
 	    2.4k.  The bigger/more featured tail can still be had by disabling
 	    BB_FEATURE_SIMPLE_TAIL in busybox.defs.h
 	* Ping now falls back to doing the right thing if /etc/protocols
 	    turns up missing.
 	* Fixed mount and umount.  Previously they could leak loop device 
 	    allocations, causing the system to quickly run out.  Fix for umount
 	    by Ben Collins <bcollins@debian.org>, and mount was fixed by me.
 	* ls formatting on eight charactor user names fixed by 
 	    Randolph Chung <tausq@debian.org>.
 	* cp could, when copying symlinks, change permissions of the
 	    files pointed to by the symlinks.
 	* Several fixes from Pavel Roskin <pavel_roskin@geocities.com>:
 	    - `chown' with 1 argument displayed the error incorrectly
 	    - `fdflush', `length' and `printf' crashed if run without arguments
 	    - `fdflush' tried to flush itself using *argv
 	    - added "skip" and "seek" to dd.
 	    - ls no longer messus up output when combining files and
 	      directories on the command line 
 	* swapoff -a was not working.  Now it is.  
 	* init did not cleanly unmount filesystems on reboot.  Now it does.  
 	* "sed -ne s/foo/bar/" worked but "sed -n -e s/foo/bar/" didn't.
 	    Now both work.
 	* Some architectures (PowerPc) assume chars are unsigned, so they could
 	    not distinguish between EOF and '\0xFF' in sed.  Sed now uses ints.
 	* Began converting error handling to use some common routines
 	    in utility.c
 	* syslogd now has better message handling and ignores SIGHUP.
 	* install.sh had a bug preventing installation to the specified
 	    target directory.  Fix from Gilbert Coville <gilbert@mvista.com>
 	* You can now spefify alternative strip commands -- change 
 	    also from Gilbert Coville.
 
 
 	-Erik Andersen
 
 0.41
 	* New Apps: wc, hostid, logname, tty, whoami, yes -- all contributed 
 	    by Edward Betts <edward@debian.org>
 	* Fixed a bug in both cp and mv preventing 'cp foo/README bar'
 	    type commands (file in a directory to another directory) from
 	    working.
 	* Fixed a logger bug that caused garbage to be written to the syslog 
 	    (unless you used busybox syslog, which hid the bug).  Thanks to
 	    Alex Holden <alex@linuxhacker.org> for the fix.
 	* /bin/true and /bin/false were echoing a blank line when run.  
 	    Now fixed.
 	* mkdir -p would print an error when asked to mkdir an existing dir
 	    with no interveining subdirectories.
 	* Fixed "syslogd -O" so that it works.  Added -o loop option for mount,
 	* and support in umount for loop
 	  devices. Support is toggled by MOUNT_LOOP feature -- Ben Collins
 	  <bcollins@debian.org>
 	* Several fixes from Marco Pantaleoni <panta@prosa.it> compile in
 	* fullWrite() not only if BB_TAR is defined, but also
 		if BB_CP or BB_MV are (fullWrite() is referenced by copyFile())
 	    * add some compiler optimizations to further reduce executable size
 		(as a side note, on my machines the largest code is generated
 		by gcc 2.95.2 with -Os ! The smallest by plain gcc 2.7.2.3 with
 		-O2 -m386 ...)
 	    * Compile now won't fail if busybox.def.h defines 
 		BB_FEATURE_LINUXRC but not BB_INIT.  (init_main used to be
 		referenced, but not compiled)
 	* Fixed a bug in setting TERM for serial console support.  TERM now
 	    defaults to "ansi" for serial consoles.
 	* Fixed a bug in handling the CONSOLE env. variable for serial
 	* consoles.
 
 	-Erik Andersen, Jan 15, 2000
 
 0.40
 	* New Apps: sort, uniq. -beppu New Apps: lsmod, rmmod -erik New Apps:
 	* fbset contributed by Randolph Chung <tausq@debian.org>.  New App::
 	* loadacm contributed by Peter Novodvorsky <petya@logic.ru>
 	    for loading application character maps for Unicode fonts.
 	* Major init re-work.  init now supports inittab (slightly different
 	    but similar to sysvinit), allowing me to get all the policy out of
 	    init and into the conf file.  It works just fine without inittab
 	    being present, but if you dont like the defautl behavior you can
 	    now do something about it.  Init is much cleaner as a result.
 	* Fixed an bug in syslogd causing it to stop after 20 minutes. -erik
 	* Fixed an embarrasing segfault in head	-beppu Fixed the embarrasing
 	* failure of 'logger -p'. -erik Added the -s option to du -beppu
 	* Re-worked the source tree a bit so it will compile under glibc 2.0.7 
 	    with the 2.0.x Linux kernel.
 	* Added 'grep -q' thanks to a patch from "Konstantin Boldyshev" 
 	    <konst@voshod.com>.
 	* Grep -i previously failed on UPPER CASE patterns due to a silly 
 	    regexp implementation bug that is now fixed.
 	* Fixed a bug where tar would set, and then clear SGID and SUID bits.
 	* Fixed a bug where tar would not set the user and group on device
 	    special files.
 	* Fixed a bug where tar would not restore the time to files.  Fixed a
 	* major security problem with tar -- it changed ownership 
 	    of any file pointed to by a symlink to 777 (like say libc....)
 	    Ouch!!!
 	* cp and mv were very broken when moving directories.  I have rewritten 
 	    them so they should now work as expected. 
 	* sed now supports addresses (numeric or regexp, with negation) and 
 	    has an append command, thanks to Marco Pantaleoni <panta@prosa.it>
 	* Fixed dmesg.  It wasn't parsing its options (-n or -s) properly.
 	* Some cosmetic fixes to ls output formatting to make it behave more
 	    like GNU ls.
 	* Fixed a stupid segfault in kill.  Several fixes from Friedrich Vedder
 	* <fwv@myrtle.lahn.de>:
 	    - Added gunzip -t, removed gunzip.c dead code,
 	    - fixed several typos
 	    - Glibc 2.0.7 and libc5 compile fixes
 	* Fixed a bug where 'mknod --help' would segfault.
 	    
 
 	-Erik Andersen, Jan 07, 2000
 
 0.39 
 	* New Apps: ping, hostname, and mkfifo contributed by Randolph Chung
 	    <tausq@debian.org>.  3 items off the TODO list!
 	* I wrote free (just calls "cat /proc/meminfo").  Added tail, based on
 	* tail from GNU textutils-1.19, but adjusted
 	    to suit my evil purposes.  Costs 6k.  I'll make it smaller
 	    sometime.
 	* on reboot, init called 'umount -a -n', which caused errors
 	    when BB_MTAB was not enabled.  Changed to 'umount -a', which does
 	    the right thing.
 	* init will now try to run /sbin/getty if it is present (for easy
 	    integration with the about-to-be-released tinylogin.)
 	* kill now behaves itself properly, added 'kill -l' to list signals 'ls
 	* -l' was failing on long directories, since my_getid was leaking 
 	    one file descriptor per file.  Oops.
 	* Fixed rebooting from init.  I'd accidently left some debugging code
 	* in
 	    which blocked reboots.
 	* Fixed reboot, halt (and added poweroff) such that they handle it when
 	    init is not at PID 1 (like when running in an initrd).
 	* Added a prelinary du implementation.  Some parameter parsing
 	    stuff still needs to be added. -beppu (John Beppu
 	    <beppu@lineo.com>)
 	* Implemented tee.  -beppu Implemented head. -beppu
 
 	-Erik Andersen, Dec 10, 1999
 
 0.38
 	* Fixed a segfault in 'umount -a' when a badly formed /etc/fstab
 	    file existed.
 	* df will not exit on error, but will stat all mounted filesystems.
 	* Fixed tar so uid/gid/permissions on extracted tarballs will be 
 	    correct.
 	* Fixed find -name so it properly uses shell wildcard patterns 
 	    (i.e. `*', `?', and `[]') instead of regular expressions, which
 	    was causing some confusing and unexpected behavior.
 	* Added klogd to syslogd, so now the log will contain both system and
 	    kernel messages.
 	* syslogd now creates the /dev/log socket to make sure it is there, and
 	    is actually a socket with the right permissions.
 	* I've taken a first step to making busybox not need the /proc 
 	    filesystem.  Most apps don't need it.  Those that _require_ it, 
 	    will complain if you enable them when you disable 
 	    BB_FEATURE_USE_PROCFS.
 	   
 	-Erik Andersen, Dec 5, 1999
 
 0.37
 	* Wrote a micro syslogd, and a logger util (to log things to the syslog
 	    from the command line or scripts)  With both compiled in, costs 4k.
 	* Fixed 'make install' so symlinks are installed in their proper
 	* locations.  Changed the build system slightly so that features can
 	* now be enabled
 	    or disabled from the busybox.defs.h header file, without trying to
 	    compile in a source file named after that featue (unless that file
 	    exists).
 	* Several options are now moved into busybox.defs.h Now 'rm -R' and 'rm
 	* -r' both work.  dd now properly handles input beyond 1 block from
 	* stdin.  Fixed a bug where tar unpacked everything a directories.
 	* Moved some code 
 	    from createPath into mkdir where it belonged, thereby making tar
 	    work properly.
 	* Fixed an off-by-one bug in cat.  Given a list of file it wouldn't cat
 	* out the
 	    last file in the list.
 	* Fixed 'ls -ln' so numeric group/uid are presented properly, and fixed
 	* 'ls -l' 
 	    so when uid/gid is not in /etc/{passwd,group} the numeric group/uid
 	    are presented properly.  
 	* Also added a TODO.
 
 
 	-Erik Andersen, Nov 25, 1999
 
 0.36
 	* fixed dd so it properly defaults to stdin and stdout when no 
 	    if= and of= are set (fix thanks to Eric Delaunay).
 	* Don't try to close the file descriptor of a pipein tar. (fix also
 	* from
 	    Eric Delaunay).
 	* Made createPath be quiet (again thanks to Eric Delaunay).  If
 	* BB_CONSOLE_CMD_IF_RC_SCRIPT_EXITS is defined, then whatever
 	    command you define it as will be run if the init script exits.
 	* Updated install.sh to make it more robust (thanks to Adam Di Carlo)
 	* NFS support added to mount by Eric Delaunay.  It costs 10k when
 	* compiled
 	    in, but that is still a big win for those that use NFS.
 	* Made 'rm -f' be silent for non-existant files (thanks to Eric
 	* Delaunay).  changed zcat.c to gunzip.c.  It now obeys the principle
 	* of least surprise 
 	    and acts as god intended gunzip and zcat to act.  They answer
 	    --help and obey the '-c' flag.
 	* Fixed a bug in mv which caused it to not move files when the
 	* destination
 	    was a directory.
 	* Fixed a decimal-instead-of-octal bug causing mkdir to make
 	* directories
 	    with very wrong permissions.
 	* chmod would overwrite file permissions instead of modifying them.
 	    Now it properly modifies permissions.
 	* Init now sends warnings destined for the console to /dev/console to
 	* ensure
 	    they show up on whatever the active console it.  Otherwise
 	    important messages (for example that the system is rebooting) were
 	    not seen when switched to a different VT.
 
 	-Erik Andersen, Nov 17, 1999
 	
 0.35
 	* gzip now obeys the principle of least surprise and acts like god
 	* intended 
 	    (i.e. it accepts a file name, answers --help, and obeys the '-c'
 	    flag and only then outputs to stdout).
 	* Fixed more.c to compile autowidth on sparc and set initial winsize 
 	    to 0,0 in case the TIOCGWINSZ ioctl fails.  Fix thanks to Eric
 	    Delaunay.
 	* Fixed tar so it now works as expected (it had TRUE/FALSE backwards)
 	* tar now accepts --help chmod, chown, and chgrp usage now works
 	* General usage (i.e. --help) cleanups for most apps umount now parses
 	* options correctly tar can now unpack tarballs containing device
 	* special files, 
 	    sockets, and fifos (though it can't pack them up) thanks to Matt
 	    Porter.  Creating archives containing these is still left to the
 	    interested student.
 	* fixed up the license in more.c to properly point to Bruce Perens.
 
 	-Erik Andersen, Nov  11, 1999
 
 0.34
 	* ls -l now displays link names outside the current directory,
 	    Patch thanks to Eric Delaunay
 	* init now properly handles sparc serial consoles and does a
 	    better job of finding the real console device rather than using
 	    /dev/console which doesn't support job control. Patch also thanks
 	    to Eric Delaunay.
 	* more started to read from stdin after the last file was finished, and 
 	    options were not parsed correctly (fix thanks to Eric Delaunay).
 	* more will now use the terminal size if BB_FEATURE_AUTOWIDTH is on.
 	* rm wouldn't remove a symlink unless the symlink was valid.  This was
 	    a side effect of the busybox 0.32 recursiveAction() fix.  Things
 	    should now work correctly.
 	* grep wouldn't grep stdin.  Now it does.  sed wouldn't sed stdin.  Now
 	* it does.  sed was appending a \n to the end of lines with
 	* replacements.
 	    Now it doesn't do that.
 	* ls -l now bypasses libc6 nss when displaying user/group names.
 	    Now uses my_getpwuid and my_getgrgid.
 
 	 -Erik Andersen, Nov  8, 1999
 
 0.33
 	* Fixed a bug where init could hang instead of rebooting.
 	* Removed some debugging noise from init.c
 	* Fixed ln so it works now (it was very broken).
 	* Fixed df so it won't segfault when there is no /etc/fstab,
 	* If BB_MTAB is not defined, df and mount will whine if /etc/fstab
 	    is not installed (since they cannot fixup "/dev/root" to 
 	    state the real root device name)
 	* merged some redundant code from mtab.c/df.c into utility.c
 
 	 -Erik Andersen, Nov  5, 1999
 
 0.32
 	* More changes -- many thanks to Lineo for paying me to work on
 	    busybox.  If you have any problems please let me know ASAP at
 	    andersen@lineo.com or andersee@debian.org
 	* usage() now prints the BusyBox version.  This will help folks
 	    realize that they are not in Kansas anymore.
 	* Fixed mkdir -m option so that it works.  kill segfaulted w/o any
 	* arguments.  Now it doesn't do that.  kill wasn't properly accepting
 	* signal names.  It does now.  Added new apps chvt and deallocvt (I
 	* should probably add open) Major rewrite of init.c.  Code is now
 	* readable by mere mortals IMHO.  Wrote sed -- weighs only 1.8k (5.8k
 	* with full regular expressions!).  Fixed a stupid seg-fault in sync
 	* Fixed mount -- mount -a failed to parse and apply mount options Fixed
 	* umount -n (patch thanks to Matthew Grant <grantma@anathoth.gen.nz>)
 	* umount -a no longer umounts /proc Added BB_MTAB, allowing (at the
 	* cost of ~1.5k and the need for a rw /etc)
 	    folks to use a real /etc/mtab file instead of a symlink to
 	    /proc/mounts.  mount, and umount will add/remove entries and df
 	    will now use /etc/mtab if BB_MTAB is defined. 
 	* Fixed a nice bug in recursiveAction() which caused it to infinitely
 	    hunt through /proc/../fd/* creating new file descriptors if it
 	    followed the /dev/fd link over to /proc.  recursiveAction() now
 	    lstat's the file when followLinks==FALSE so it won't follow links
 	    as the name suggests.  Fix thanks to Matt Porter
 	    <porter@debian.org>.
 
 
 	 -Erik Andersen, Nov  4, 1999
 
 0.31
 	* I added a changelog for version 0.30.  adjusted find internals to
 	* make it smaller, and removed 
 	    some redundancy.
 	* Fixed a segfault in ps when /etc/passwd or /etc/group 
 	    are absent.  Now will warn you and carry on.
 	* Added in optional _real_ regular expression support (to be
 	    the basis for a future sed utility).  When compiled in it adds
 	    3.9k, but makes grep much more capable.
 	* Checked out using nftw(3) for recursive stuff, but unfortunatly
 	    it wasn't supported before GNU libc 2.1, and some folks use glibc
 	    2.0.7 since it is much smaller than that latest and greatest.
 
 	 -Erik Andersen, Oct 21, 1999
 
 0.30
 	Major changes -- lots of stuff rewritten. Many thanks to Lineo for
 	paying me to make these updates. If you have any problems with busybox, 
 	or notice any bugs -- please let me know so I can fix it.  These 
 	changes include:
 
 	Core Changes:
 	    * busybox can now invoke apps in two ways: via symlinks to the
 		busybox binary, and as 'busybox [function] [arguments]...'
 	    * When invoked as busybox, the list of currently compiled in 
 		functions is printed out (no this is not bloat -- the list has
 		to be there anyway to map invocation name to function).
 	    * busybox no longer parses command lines for apps or displays their
 		usage info.  Each app gets to handle (or not handle) this for
 		itself.
 	    * Eliminated monadic, dyadic, descend, block_device, and 
 		postprocess.  It was cumbersome to have so many programs
 		cobbled together in this way.  Without them, the app is much
 		more granular.
 	    * All shared code now lives in utility.c, and is properly
 		ifdef'ed to be only included for those apps requiring it.
 	    * Eliminated struct FileInfo (the basis of monadic, dyadic, etc)
 		so now each app has the function prototype of (da-dum): extern
 		int foo_main(int argc, char** argv); which speeds integration
 		of new apps.
 	    * Adjusted the Makefile to make it easier to 
 		{en|dis}able debugging.
 	    * Changed default compiler optimization to -Os 
 		(optimize for smaller binaries).
 
 	App Changes:
 	    * To cope with the new app function prototype and the removal of
 		monadic, dyadic, etc, the following apps were re-written:
 		    * cat - Works same as always.  chgrp, chmod, chown -
 		    * rewrite.  Combined into a single 
 			source file.  Absorbed patches from Enrique Zanardi
 			<ezanard@debian.org> that removes the dependency on
 			libc6 libnss* libraries.
 		    * cp - Can now do 'cp -a' can can copy devices,
 			pipes, symlinks, as well as recursive or non-recursive
 			dir copies.
 		    * fdflush - adjusted to remove dependancy on struct
 		    * FileInfo.  find - Now includes some basic regexp matching 
 			which will be the basic of a future mini-sed.
 		    * ln - Same functionality.  mkdir - Added -p flag to
 		    * feature set.  mv - rewrite.  rm - Added -f flag to
 		    * feature set.  rmdir - Same functionality.  swapon,
 		    * swapoff - Combined into a single binary. No longer
 			uses /etc/swaps.  swap{on|off} -a uses /etc/fstab
 			instead.
 		    * touch - Same functionality.  date - adjusted with a patch
 		    * from Matthew Grant <grantma@anathoth.gen.nz>
 		to accomodate glibc timezone support.  I then ripped out GNU
 		getopt.
 	    * mkswap -- new version merged from util-linux.  Can now make 
 			>128Meg swaps.  
 		* Replaced the old and star, unstar, and tarcat with the tar 
 			implementation from sash.   Now tar behaves as god intended it
 			to (i.e. tar -xvf <file> and tar -cf <file> <dir> work).
 	    * dd -- rewritten.  Can with with files, stdin, stdout.  Added the
 	    * following new apps: loadfont -- added from debian boot floppies
 	    * chroot -- added based on a patch from Paolo Molaro
 	    * <lupus@lettere.unipd.it> grep -- I just wrote it.  Only matches
 	    * simple strings ps -- I just wrote it.  Has _no_ options at all,
 	    * but works.  fsck_minix, mkfs_minix -- added from util-linux, but
 	    * I ripped out
 			internationalization and such to make them smaller.
 		    * sfdisk -- Added from util-linux (minus
 		    * internationalization and such).  Probably some other
 		    * changes that I forgot to document...
 
 	 -Erik Andersen, Oct 20, 1999
 
 0.29	
 	This version was a messy pre-alpha.  stay away or it will bite you.
 	 -Erik Andersen, Sep 24, 1999
 	
 0.28	
 	mini-netcat (mnc) rewritten.
 	
 0.27
 	Mount now supports -a, and -t auto.
 	Mount now updates mtab correctly for 'ro'.
 	More checks screen rows size, outputs bytes percentage.
 	Printf added as module.
 0.26
 	Touch now creates files. -c option for no create.
 	
diff --git a/docs/busybox.pod b/docs/busybox.pod
index 3cd45f7..7a04b8f 100644
--- a/docs/busybox.pod
+++ b/docs/busybox.pod
@@ -1,1951 +1,1952 @@
 # vi: set sw=4 ts=4:
 
 =head1 NAME
 
 BusyBox - The Swiss Army Knife of Embedded Linux
 
 =head1 SYNTAX
 
  BusyBox <function> [arguments...]  # or
 
  <function> [arguments...]	    # if symlinked
 
 =head1 DESCRIPTION
 
 BusyBox combines tiny versions of many common UNIX utilities into a single
 small executable. It provides minimalist replacements for most of the utilities
 you usually find in fileutils, shellutils, findutils, textutils, grep, gzip,
 tar, etc.  BusyBox provides a fairly complete POSIX environment for any small
 or emdedded system.  The utilities in BusyBox generally have fewer options than
 their full-featured GNU cousins; however, the options that are included provide
 the expected functionality and behave very much like their GNU counterparts.  
 
 BusyBox has been written with size-optimization and limited resources in mind.
 It is also extremely modular so you can easily include or exclude commands (or
 features) at compile time.  This makes it easy to customize your embedded
 systems.  To create a working system, just add a kernel, a shell (such as ash),
 and an editor (such as elvis-tiny or ae).
 
 =head1 USAGE
 
 When you create a link to BusyBox for the function you wish to use, when BusyBox
 is called using that link it will behave as if the command itself has been invoked.
 
 For example, entering
 
 	ln -s ./BusyBox ls
 	./ls
 
 will cause BusyBox to behave as 'ls' (if the 'ls' command has been compiled
 into BusyBox).  
 
 You can also invoke BusyBox by issuing the command as an argument on the
 command line.  For example, entering
 
 	./BusyBox ls
 
 will also cause BusyBox to behave as 'ls'. 
 
 =head1 COMMON OPTIONS
 
 Most BusyBox commands support the B<--help> option to provide a
 terse runtime description of their behavior. 
 
 =head1 COMMANDS
 
 Currently defined functions include:
 
 ar, basename, cat, chgrp, chmod, chown, chroot, clear, chvt, cp, cut, date, dd,
 df, dirname, dmesg, du, dutmp, echo, false, fbset, fdflush, find, free,
 freeramdisk, deallocvt, fsck.minix, grep, gunzip, gzip, halt, head, hostid,
 hostname, id, init, kill, killall, length, ln, loadacm, loadfont, loadkmap,
 logger, logname, ls, lsmod, makedevs, math, mkdir, mkfifo, mkfs.minix, mknod,
 mkswap, mktemp, nc, more, mount, mt, mv, nslookup, ping, poweroff, printf, ps,
 pwd, reboot, rm, rmdir, rmmod, sed, setkeycodes, sh, sfdisk, sleep, sort, sync,
 syslogd, swapon, swapoff, tail, tar, test, tee, touch, tr, true, tty, umount,
 uname, uniq, update, uptime, usleep, wc, whoami, yes, zcat, [
 
 -------------------------------
 
 =over 4
 
 =item ar
 
 Usage: ar [optxvV] archive [filenames]
 
 Extract or list files from an ar archive.
 
 Options:
 
 	o               preserve original dates
 	p               extract to stdout
 	t               list
 	x               extract
 	v               verbosely list files processed
 
 -------------------------------
 
 =item basename
 
 Usage: basename FILE [SUFFIX]
 
 Strips directory path and suffixes from FILE.
 If specified, also removes any trailing SUFFIX.
 
 Example: 
 
 	$ basename /usr/local/bin/foo
 	foo
 	$ basename /usr/local/bin/
 	bin
 	$ basename /foo/bar.txt .txt
 	bar
 
 -------------------------------
 
 =item cat  
 
 Usage: cat [FILE ...]
 
 Concatenates FILE(s) and prints them to the standard output.
 
 Example:
 
 	$ cat /proc/uptime
 	110716.72 17.67
 
 -------------------------------
 
 =item chgrp
 
 Usage: chgrp [OPTION]... GROUP FILE...
 
 Change the group membership of each FILE to GROUP.
 
 Options:
 
 	-R	change files and directories recursively
 
 Example:
 
 	$ ls -l /tmp/foo
 	-r--r--r--    1 andersen andersen        0 Apr 12 18:25 /tmp/foo
 	$ chgrp root /tmp/foo
 	$ ls -l /tmp/foo
 	-r--r--r--    1 andersen root            0 Apr 12 18:25 /tmp/foo
 
 -------------------------------
 
 =item chmod
 
 Usage: chmod [B<-R>] MODE[,MODE]... FILE...
 
 Changes file access permissions for the specified FILE(s) (or directories).
 Each MODE is defined by combining the letters for WHO has access to the file,
 an OPERATOR for selecting how the permissions should be changed, and a
 PERISSION for FILE(s) (or directories).
 
 WHO may be chosen from
 
 	u	User who owns the file
 	g	Users in the file's Group
 	o	Other users not in the file's group
 	a	All users
 
 OPERATOR may be chosen from
 
 	+	Add a permission
 	-	Remove a permission
 	=	Assign a permission
  
 PERMISSION may be chosen from
 
 	r	Read
 	w	Write
 	x	Execute (or access for directories)
 	s	Set user (or group) ID bit
 	t	Stickey bit (for directories prevents removing files by non-owners)
 
 Alternately, permissions can be set numerically where the first three
 numbers are calculated by adding the octal values, such as
 
 	4	Read
 	2	Write
 	1	Execute
 
 An optional fourth digit can also be used to specify
 
 	4	Set user ID
 	2	Set group ID
 	1	Stickey bit
 
 Options:
 
 	-R	Change files and directories recursively.
  
 Example:
 
 	$ ls -l /tmp/foo
 	-rw-rw-r--    1 root     root            0 Apr 12 18:25 /tmp/foo
 	$ chmod u+x /tmp/foo
 	$ ls -l /tmp/foo
 	-rwxrw-r--    1 root     root            0 Apr 12 18:25 /tmp/foo*
 	$ chmod 444 /tmp/foo
 	$ ls -l /tmp/foo
 	-r--r--r--    1 root     root            0 Apr 12 18:25 /tmp/foo
 
 -------------------------------
 
 =item chown
 
 Usage: chown [OPTION]...  OWNER[<.|:>[GROUP] FILE...
 
 Changes the owner and/or group of each FILE to OWNER and/or GROUP.
 
 Options:
 
 	-R	Changes files and directories recursively
 
 Example:
 
 	$ ls -l /tmp/foo
 	-r--r--r--    1 andersen andersen        0 Apr 12 18:25 /tmp/foo
 	$ chown root /tmp/foo
 	$ ls -l /tmp/foo
 	-r--r--r--    1 root     andersen        0 Apr 12 18:25 /tmp/foo
 	$ chown root.root /tmp/foo
 	ls -l /tmp/foo
 	-r--r--r--    1 root     root            0 Apr 12 18:25 /tmp/foo
 
 -------------------------------
 
 =item chroot
 
 Usage: chroot NEWROOT [COMMAND...]
 
 Run COMMAND with root directory set to NEWROOT.
  
 Example:
 
 	$ ls -l /bin/ls
 	lrwxrwxrwx    1 root     root          12 Apr 13 00:46 /bin/ls -> /BusyBox
 	$ mount /dev/hdc1 /mnt -t minix
 	$ chroot /mnt
 	$ ls -l /bin/ls
 	-rwxr-xr-x    1 root     root        40816 Feb  5 07:45 /bin/ls*
 
 -------------------------------
 
 =item clear
 
 Clears the screen.
 
 -------------------------------
 
 =item chvt
 
 Usage: chvt N
 
 Changes the foreground virtual terminal to /dev/ttyN
 
 -------------------------------
 
 =item cp
 
 Usage: cp [OPTION]... SOURCE DEST
 
    or: cp [OPTION]... SOURCE... DIRECTORY
 
 Copies SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.
 
 Options:
 
         -a      Same as -dpR
         -d      Preserves links
         -p      Preserves file attributes if possable
         -R      Copies directories recursively
 
 -------------------------------
 
 =item cut
 
 Usage: cut [OPTION]... [FILE]...
 
 Prints selected fields from each input FILE to standard output.
 
 Options:
 
         -b LIST Output only bytes from LIST
         -c LIST Output only characters from LIST
         -d DELIM        Use DELIM instead of tab as the field delimiter
         -f N    Print only these fields
         -n      Ignored
 
 Example:
 
 	$ echo "Hello world" | cut -f 1 -d ' '
 	Hello
 	$ echo "Hello world" | cut -f 2 -d ' '
 	world
 
 
 -------------------------------
 
 =item date
 
 Usage: date [OPTION]... [+FORMAT]
 
   or:  date [OPTION] [MMDDhhmm[[CC]YY][.ss]]
 
 Displays the current time in the given FORMAT, or sets the system date.
 
 Options:
 
         -R      Outputs RFC-822 compliant date string
         -s      Sets time described by STRING
         -u      Prints or sets Coordinated Universal Time
 
 Example:
 
 	$ date
 	Wed Apr 12 18:52:41 MDT 2000
 
 -------------------------------
 
 =item dd
 
 Usage: dd [if=name] [of=name] [bs=n] [count=n] [skip=n] [seek=n]
 
 Copy a file, converting and formatting according to options
 
 	if=FILE read from FILE instead of stdin
 	of=FILE write to FILE instead of stdout
 	bs=n    read and write n bytes at a time
 	count=n copy only n input blocks
 	skip=n  skip n input blocks
 	seek=n  skip n output blocks
 
 Numbers may be suffixed by w (x2), k (x1024), b (x512), or M (x1024^2)
  
 Example:
 
 	$ dd if=/dev/zero of=/dev/ram1 bs=1M count=4
 	4+0 records in
 	4+0 records out
 
 -------------------------------
 
 =item df
 
 Usage: df [filesystem ...]
 
 Prints the filesystem space used and space available.
 
 Example:
 
 	$ df
 	Filesystem           1k-blocks      Used Available Use% Mounted on
 	/dev/sda3              8690864   8553540    137324  98% /
 	/dev/sda1                64216     36364     27852  57% /boot
 	$ df /dev/sda3
 	Filesystem           1k-blocks      Used Available Use% Mounted on
 	/dev/sda3              8690864   8553540    137324  98% /
 
 -------------------------------
 
 =item dirname
 
 Usage: dirname NAME
 
 Strip non-directory suffix from file name
 
 Example:
 
 	$ dirname /tmp/foo
 	/tmp
 	$ dirname /tmp/foo/
 	/tmp
 
 -------------------------------
 
 =item dmesg
 
 Usage: dmesg [B<-c>] [B<-n> level] [B<-s> bufsize]
  
 Print or controls the kernel ring buffer.
 
 -------------------------------
 
 =item du
 
 Usage: du [OPTION]... [FILE]...
 
 Summarize disk space used for each FILE and/or directory.
 Disk space is printed in units of 1k (i.e. 1024 bytes).
 
 Options:
 
 	-l      count sizes many times if hard linked
 	-s      display only a total for each argument
 
 Example:
 
 	$ ./BusyBox du
 	16      ./CVS
 	12      ./kernel-patches/CVS
 	80      ./kernel-patches
 	12      ./tests/CVS
 	36      ./tests
 	12      ./scripts/CVS
 	16      ./scripts
 	12      ./docs/CVS
 	104     ./docs
 	2417    .
 	 
 -------------------------------
 
 =item dutmp
 
 Usage: dutmp [FILE]
 
 Dump utmp file format (pipe delimited) from FILE
 or stdin to stdout.
 
 Example:
 
 	$ dutmp /var/run/utmp
 	8|7||si|||0|0|0|955637625|760097|0
 	2|0|~|~~|reboot||0|0|0|955637625|782235|0
 	1|20020|~|~~|runlevel||0|0|0|955637625|800089|0
 	8|125||l4|||0|0|0|955637629|998367|0
 	6|245|tty1|1|LOGIN||0|0|0|955637630|998974|0
 	6|246|tty2|2|LOGIN||0|0|0|955637630|999498|0
 	7|336|pts/0|vt00andersen|andersen|:0.0|0|0|0|955637763|0|0
 	 
 -------------------------------
 
 =item echo
 
 Usage: echo [-neE] [ARG ...]
 
 Prints the specified ARGs to stdout
 
 Options:
 
 	-n      suppress trailing newline
 	-e      interpret backslash-escaped characters (i.e. \t=tab etc)
 	-E      disable interpretation of backslash-escaped characters
 
 Example:
 
 	$ echo "Erik is cool"
 	Erik is cool
 	$  echo -e "Erik\nis\ncool"
 	Erik
 	is
 	cool
 	$ echo "Erik\nis\ncool"
 	Erik\nis\ncool
 	 
 -------------------------------
 
 =item false
 
 Returns an exit code of FALSE (1)
 
 Example:
 
 	$ false
 	$ echo $?
 	1
 
 -------------------------------
 
 =item fbset
 
 Usage: fbset [options] [mode]
 
 Show and modify frame buffer device settings
 
 Options:
 
 	-h
 	-fb
 	-db
 	-a
 	-i
 	-g
 	-t
 	-accel
 	-hsync
 	-vsync
 	-laced
 	-double
 
 Example:
 
 	$ fbset
 	mode "1024x768-76"
 			# D: 78.653 MHz, H: 59.949 kHz, V: 75.694 Hz
 			geometry 1024 768 1024 768 16
 			timings 12714 128 32 16 4 128 4
 			accel false
 			rgba 5/11,6/5,5/0,0/0
 	endmode
 
 -------------------------------
 
 =item fdflush
 
 Usage: fdflush device
 
 Force floppy disk drive to detect disk change
 
 -------------------------------
 
 =item find
 
 Usage: find [PATH...] [EXPRESSION]
 
 Search for files in a directory hierarchy.  The default PATH is
 the current directory; default EXPRESSION is '-print'
 
 
 EXPRESSION may consist of:
 
 	-follow			Dereference symbolic links.
 	-name PATTERN	File name (leading directories removed) matches PATTERN.
 	-print			print the full file name followed by a newline to stdout.
 
 Example:
 
 	$ find / -name /etc/passwd
 	/etc/passwd
 
 -------------------------------
 
 =item free
 
 Usage: free
 
 Displays the amount of free and used system memory.
 
 Example:
 
 	$ free
 				  total         used         free       shared      buffers
 	  Mem:       257628       248724         8904        59644        93124
 	 Swap:       128516         8404       120112
 	Total:       386144       257128       129016
 
 -------------------------------
 
 =item freeramdisk
 
 Usage: freeramdisk DEVICE
 
 Frees all memory used by the specified ramdisk.
 
 Example:
 
 	$ freeramdisk /dev/ram2
 
 -------------------------------
 
 =item deallocvt
 
 Usage: deallocvt N
 
 Deallocates unused virtual terminal /dev/ttyN
 
 -------------------------------
 
 =item fsck.minix
 
 Usage: fsck.minix [B<-larvsmf>] /dev/name
 
 Performs a consistency check for MINIX filesystems.
 
 OPTIONS:
 
 	-l      Lists all filenames
 	-r      Perform interactive repairs
 	-a      Perform automatic repairs
 	-v      verbose
 	-s      Outputs super-block information
 	-m      Activates MINIX-like "mode not cleared" warnings
 	-f      Force file system check.
 
 -------------------------------
 
 =item grep
 
 Usage: grep [OPTIONS]... PATTERN [FILE]...
 
 Search for PATTERN in each FILE or standard input.
 
 OPTIONS:
 
 	-h      suppress the prefixing filename on output
 	-i      ignore case distinctions
 	-n      print line number with output lines
 	-q      be quiet. Returns 0 if result was found, 1 otherwise
 	-v      select non-matching lines
 
 This version of grep matches full regular expresions.
 
 Example:
 
 	$ grep root /etc/passwd
 	root:x:0:0:root:/root:/bin/bash
 	$ grep ^[rR]oo. /etc/passwd
 	root:x:0:0:root:/root:/bin/bash
 
 -------------------------------
 
 =item gunzip
 
 Usage: gunzip [OPTION]... FILE
 
 Uncompress FILE (or standard input if FILE is '-').
 
 Options:
 
         -c      Write output to standard output
         -t      Test compressed file integrity
 
 Example:
 
 	$ ls -la /tmp/BusyBox*
 	-rw-rw-r--    1 andersen andersen   557009 Apr 11 10:55 /tmp/BusyBox-0.43.tar.gz
 	$ gunzip /tmp/BusyBox-0.43.tar.gz
 	$ ls -la /tmp/BusyBox*
 	-rw-rw-r--    1 andersen andersen  1761280 Apr 14 17:47 /tmp/BusyBox-0.43.tar
 
 -------------------------------
 
 =item gzip
 
 Usage: gzip [OPTION]... FILE
 
 Compress FILE with maximum compression.
 When FILE is '-', reads standard input.  Implies B<-c>.
 
 Options:
 
         -c      Write output to standard output instead of FILE.gz
 
 Example:
 
 	$ ls -la /tmp/BusyBox*
 	-rw-rw-r--    1 andersen andersen  1761280 Apr 14 17:47 /tmp/BusyBox-0.43.tar
 	$ gzip /tmp/BusyBox-0.43.tar
 	$ ls -la /tmp/BusyBox*
 	-rw-rw-r--    1 andersen andersen   554058 Apr 14 17:49 /tmp/BusyBox-0.43.tar.gz
 
 
 -------------------------------
 
 =item halt
 
 Usage: halt
 
 This comand halts the system.
 
 -------------------------------
 
 =item head
 
 Usage: head [OPTION] [FILE]...
 
 Print first 10 lines of each FILE to standard output.
 With more than one FILE, precede each with a header giving the
 file name. With no FILE, or when FILE is -, read standard input.
 
 Options:
 
 	-n NUM          Print first NUM lines instead of first 10
 
 Example:
 
 	$ head -n 2 /etc/passwd
 	root:x:0:0:root:/root:/bin/bash
 	daemon:x:1:1:daemon:/usr/sbin:/bin/sh
 
 -------------------------------
 
 =item hostid
 
 Usage: hostid
 
 Prints out a unique  32-bit  identifier  for  the  current
 machine.   The  32-bit identifier is intended to be unique
 among all UNIX systems in existence. 
 
 -------------------------------
 
 =item hostname
 
 Usage: hostname [OPTION] {hostname | B<-F> file}
 
 Get or set the hostname or DNS domain name. If a hostname is given
 (or a file with the B<-F> parameter), the host name will be set.
 
 Options:
 
 	-s              Short
 	-i              Addresses for the hostname
 	-d              DNS domain name
 	-F FILE         Use the contents of FILE to specify the hostname
 
 Example:
 
 	$ hostname
 	slag 
 
 -------------------------------
 
 =item id
 
 Print information for USERNAME or the current user
 
 Options:
 
         -g      prints only the group ID
         -u      prints only the user ID
         -r      prints the real user ID instead of the effective ID (with -ug)
 
 Example:
 
 	$ id
 	uid=1000(andersen) gid=1000(andersen)
 
 -------------------------------
 
 =item init
 
 Usage: init
 
 Init is the parent of all processes.
 
 This version of init is designed to be run only by the kernel.
 
 BusyBox init doesn't support multiple runlevels.  The runlevels field of
 the /etc/inittab file is completely ignored by BusyBox init. If you want 
 runlevels, use sysvinit.
 
 BusyBox init works just fine without an inittab.  If no inittab is found, 
 it has the following default behavior:
 
 	::sysinit:/etc/init.d/rcS
 	::askfirst:/bin/sh
 
 if it detects that /dev/console is _not_ a serial console, it will also run:
 
 	tty2::askfirst:/bin/sh
 
 If you choose to use an /etc/inittab file, the inittab entry format is as follows:
 
 	<id>:<runlevels>:<action>:<process>
 
 	<id>: 
 
 		WARNING: This field has a non-traditional meaning for BusyBox init!
 		The id field is used by BusyBox init to specify the controlling tty for
 		the specified process to run on.  The contents of this field are
 		appended to "/dev/" and used as-is.  There is no need for this field to
 		be unique, although if it isn't you may have strange results.  If this
 		field is left blank, it is completely ignored.  Also note that if
 		BusyBox detects that a serial console is in use, then all entries
 		containing non-empty id fields will _not_ be run.  BusyBox init does
 		nothing with utmp.  We don't need no stinkin' utmp.
 
 	<runlevels>: 
 
 		The runlevels field is completely ignored.
 
 	<action>: 
 
 		Valid actions include: sysinit, respawn, askfirst, wait, 
 		once, and ctrlaltdel.
 
 		askfirst acts just like respawn, but before running the specified
 		process it displays the line "Please press Enter to activate this
 		console." and then waits for the user to press enter before starting
 		the specified process.
 
 		Unrecognised actions (like initdefault) will cause init to emit
 		an error message, and then go along with its business.
 
 	<process>: 
 
 		Specifies the process to be executed and it's command line.
 
 
 Example /etc/inittab file:
 
 	# This is run first except when booting in single-user mode.
 	#
 	::sysinit:/etc/init.d/rcS
 
 	# /bin/sh invocations on selected ttys
 	#
 	# Start an "askfirst" shell on the console (whatever that may be)
 	::askfirst:/bin/sh
 	# Start an "askfirst" shell on /dev/tty2
 	tty2::askfirst:/bin/sh
 
 	# /sbin/getty invocations for selected ttys
 	#
 	tty4::respawn:/sbin/getty 38400 tty4
 	tty5::respawn:/sbin/getty 38400 tty5
 
 
 	# Example of how to put a getty on a serial line (for a terminal)
 	#
 	#ttyS0::respawn:/sbin/getty -L ttyS0 9600 vt100
 	#ttyS1::respawn:/sbin/getty -L ttyS1 9600 vt100
 	#
 	# Example how to put a getty on a modem line.
 	#ttyS2::respawn:/sbin/getty -x0 -s 57600 ttyS2
 
 	# Stuff to do before rebooting
 	::ctrlaltdel:/bin/umount -a -r > /dev/null 2>&1
 	::ctrlaltdel:/sbin/swapoff -a > /dev/null 2>&1
 
 -------------------------------
 
 =item kill
 
 Usage: kill [B<-signal>] process-id [process-id ...]
 
 Send a signal (default is SIGTERM) to the specified process(es).
 
 Options:
 
 	-l      List all signal names and numbers.
 
 Example:
 
 	$ ps | grep apache
 	252 root     root     S [apache]
 	263 www-data www-data S [apache]
 	264 www-data www-data S [apache]
 	265 www-data www-data S [apache]
 	266 www-data www-data S [apache]
 	267 www-data www-data S [apache]
 	$ kill 252
 
 -------------------------------
 
 =item killall
 
 Usage: killall [B<-signal>] process-name [process-name ...]
 
 Send a signal (default is SIGTERM) to the specified process(es).
 
 Options:
 
         -l      List all signal names and numbers.
 
 Example:
 
 	$ killall apache
 
 -------------------------------
 
 =item length
 
 Usage: length STRING
 
 Prints out the length of the specified STRING.
 
 Example:
 
 	$ length "Hello"
 	5
 
 -------------------------------
 
 =item ln
 
 Usage: ln [OPTION] TARGET... LINK_NAME|DIRECTORY
 
 Create a link named LINK_NAME or DIRECTORY to the specified TARGET
  
 Options:
 
 	-s	make symbolic links instead of hard links
 	-f	remove existing destination files
  
 Example:
 
     $ ln -s BusyBox /tmp/ls
     $ ls -l /tmp/ls
     lrwxrwxrwx    1 root     root            7 Apr 12 18:39 ls -> BusyBox*
 
 -------------------------------
 
 =item loadacm
 
 Usage: loadacm
 
 Loads an acm from standard input.
 
 Example:
 
 	$ loadacm < /etc/i18n/acmname
 
 -------------------------------
 
 =item loadfont
 
 Usage: loadfont
 
 Loads a console font from standard input.
 
 Example:
 
 	$ loadfont < /etc/i18n/fontname
 
 -------------------------------
 
 =item loadkmap
 
 Usage: loadkmap
 
 Loads a binary keyboard translation table from standard input.
 
 Example:
 
 	$ loadkmap < /etc/i18n/lang-keymap
 
 -------------------------------
 
 =item logger
 
 Usage: logger [OPTION]... [MESSAGE]
 
 Write MESSAGE to the system log.  If MESSAGE is '-', log stdin.
 
 Options:
 
         -s      Log to stderr as well as the system log.
         -t      Log using the specified tag (defaults to user name).
         -p      Enter the message with the specified priority.
                 This may be numerical or a ``facility.level'' pair.
 
 Example:
 
 		$ logger "hello"
 
 -------------------------------
 
 =item logname
 
 Usage: logname
 
 Print the name of the current user.
 
 Example:
 
 	$ logname
 	root
 
 -------------------------------
 
 =item ls
 
 Usage: ls [B<-1acdelnpuxACFR>] [filenames...]
 
 Options:
 
 	-a	do not hide entries starting with .
 	-c	with  -l:  show ctime (the time of last
 		modification of file status information)
 	-d	list directory entries instead of contents
 	-e	list both full date and full time
 	-l	use a long listing format
 	-n	list numeric UIDs and GIDs instead of names
 	-p	append indicator (one of /=@|) to entries
 	-u	with -l: show access time (the time of last
 		access of the file)
 	-x	list entries by lines instead of by columns
 	-A	do not list implied . and ..
 	-C	list entries by columns
 	-F	append indicator (one of */=@|) to entries
 	-R  list subdirectories recursively
 
 -------------------------------
 
 =item lsmod
 
 Usage: lsmod
 
 Shows a list of all currently loaded kernel modules.
 
 -------------------------------
 
 =item makedevs
 
 Usage: makedevs NAME TYPE MAJOR MINOR FIRST LAST [s]
 
 Creates a range of block or character special files
 
 TYPEs include:
 
         b:      Make a block (buffered) device.
         c or u: Make a character (un-buffered) device.
         p:      Make a named pipe. MAJOR and MINOR are ignored for named pipes.
 
 FIRST specifies the number appended to NAME to create the first device.
 LAST specifies the number of the last item that should be created.
 If 's' is the last argument, the base device is created as well.
 
 Example:
 
 	$ makedevs /dev/ttyS c 4 66 2 63
 	[creates ttyS2-ttyS63]
 	$ makedevs /dev/hda b 3 0 0 8 s
 	[creates hda,hda1-hda8]
 
 -------------------------------
 
 =item math
 
 Usage: math expression ...
 
 This is a Tiny RPN calculator that understands the
 following operations: +, -, /, *, and, or, not, eor.
 
 Example:
 
 	$ math 2 2 add
 	4
 	$ math 8 8 \* 2 2 + /
 	16
 	$ math 0 1 and
 	0
 	$ math 0 1 or
 	1
 
 -------------------------------
 
 =item mkdir
 
 Usage: mkdir [OPTION] DIRECTORY...
 
 Create the DIRECTORY(ies), if they do not already exist
 
 Options:
 
 	-m      set permission mode (as in chmod), not rwxrwxrwx - umask
 	-p      no error if dir exists, make parent directories as needed
 
 Example:
 
 	$ mkdir /tmp/foo
 	$ mkdir /tmp/foo
 	/tmp/foo: File exists
 	$ mkdir /tmp/foo/bar/baz
 	/tmp/foo/bar/baz: No such file or directory
 	$ mkdir -p /tmp/foo/bar/baz
 
 -------------------------------
 
 =item mkfifo
 
 Usage: mkfifo [OPTIONS] name
 
 Creates a named pipe (identical to 'mknod name p')
 
 Options:
 
         -m      create the pipe using the specified mode (default a=rw)
 
 -------------------------------
 
 =item mkfs.minix
 
 Usage: mkfs.minix [B<-c> | B<-l> filename] [B<-nXX>] [B<-iXX>] /dev/name [blocks]
 
 Make a MINIX filesystem.
 
 OPTIONS:
 
 	-c              Check the device for bad blocks
 	-n [14|30]      Specify the maximum length of filenames
 	-i              Specify the number of inodes for the filesystem
 	-l FILENAME     Read the bad blocks list from FILENAME
 	-v              Make a Minix version 2 filesystem
 
 -------------------------------
 
 =item mknod
 
 Usage: mknod [OPTIONS] NAME TYPE MAJOR MINOR
 
 Create a special file (block, character, or pipe).
 
 Options:
 
         -m      create the special file using the specified mode (default a=rw)
 
 TYPEs include:
         b:      Make a block (buffered) device.
         c or u: Make a character (un-buffered) device.
         p:      Make a named pipe. MAJOR and MINOR are ignored for named pipes.
 
 Example:
 
 	$ mknod /dev/fd0 b 2 0 
 	$ mknod -m 644 /tmp/pipe p
 
 -------------------------------
 
 =item mkswap
 
 Usage: mkswap [B<-c>] [B<-v0>|B<-v1>] device [block-count]
 
 Prepare a disk partition to be used as a swap partition.
 
 Options:
 
 	-c              Check for read-ability.
 	-v0             Make version 0 swap [max 128 Megs].
 	-v1             Make version 1 swap [big!] (default for kernels > 2.1.117).
 	block-count     Number of block to use (default is entire partition).
 
 -------------------------------
 
 =item mktemp
 
 Usage: mktemp [B<-q>] TEMPLATE
 
 Creates a temporary file with its name based on TEMPLATE.
 TEMPLATE is any name with six `Xs' (i.e. /tmp/temp.XXXXXX).
 
 Example:
 
 	$ mktemp /tmp/temp.XXXXXX
 	/tmp/temp.mWiLjM
 	$ ls -la /tmp/temp.mWiLjM
 	-rw-------    1 andersen andersen        0 Apr 25 17:10 /tmp/temp.mWiLjM
 
 -------------------------------
 
 =item nc
 
 Usage: nc [IP] [port]
 
 Netcat opens a pipe to IP:port
 
 Example:
 
 	$ nc foobar.somedomain.com 25
 	220 foobar ESMTP Exim 3.12 #1 Sat, 15 Apr 2000 00:03:02 -0600
 	help
 	214-Commands supported:
 	214-    HELO EHLO MAIL RCPT DATA AUTH
 	214     NOOP QUIT RSET HELP
 	quit
 	221 foobar closing connection
  
 -------------------------------
 
 =item more
 
 Usage: more [file ...]
 
 More is a filter for paging through text one screenful at a time.
 
 Example:
 
 	$ dmesg | more
 
 -------------------------------
 
 =item mount
 
 Usage:  mount [flags]
         mount [flags] device directory [B<-o> options,more-options]
 
 Flags:
 
 	-a:             Mount all file systems in fstab.
 	-o option:      One of many filesystem options, listed below.
 	-r:             Mount the filesystem read-only.
 	-t fs-type:     Specify the filesystem type.
 	-w:             Mount for reading and writing (default).
 
 Options for use with the "B<-o>" flag:
 
 	async/sync:     Writes are asynchronous / synchronous.
 	atime/noatime:  Enable / disable updates to inode access times.
 	dev/nodev:      Allow use of special device files / disallow them.
 	exec/noexec:    Allow use of executable files / disallow them.
 	loop:           Mounts a file via loop device.
 	suid/nosuid:    Allow set-user-id-root programs / disallow them.
 	remount:        Re-mount a currently-mounted filesystem, changing its flags.
 	ro/rw:          Mount for read-only / read-write.
 	There are EVEN MORE flags that are specific to each filesystem.
 	You'll have to see the written documentation for those.
 
 Example:
 
 	$ mount
 	/dev/hda3 on / type minix (rw)
 	proc on /proc type proc (rw)
 	devpts on /dev/pts type devpts (rw)
 	$ mount /dev/fd0 /mnt -t msdos -o ro
 	$ mount /tmp/diskimage /opt -t ext2 -o loop
 
 -------------------------------
 
 =item mt
 
 Usage: mt [B<-f> device] opcode value
 
 Control magnetic tape drive operation
 
 -------------------------------
 
 =item mv
 
 Usage: mv SOURCE DEST
 
    or: mv SOURCE... DIRECTORY
 
 Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.
 
 Example:
 
 	$ mv /tmp/foo /bin/bar
 
 -------------------------------
 
 =item nslookup
 
 Usage: nslookup [HOST]
 
 Queries the nameserver for the IP address of the given HOST
 
 Example:
 
 	$ nslookup localhost
 	Server:     default
 	Address:    default
 
 	Name:       debian
 	Address:    127.0.0.1
 
 -------------------------------
 
 =item ping
 
 Usage: ping [OPTION]... host
 
 Send ICMP ECHO_REQUEST packets to network hosts.
 
 Options:
 
 	-c COUNT        Send only COUNT pings.
+	-s SIZE		Send SIZE data bytes in packets (default=56).
 	-q              Quiet mode, only displays output at start
                         and when finished.
 Example:
 
 	$ ping localhost
 	PING slag (127.0.0.1): 56 data bytes
 	64 bytes from 127.0.0.1: icmp_seq=0 ttl=255 time=20.1 ms
 
 	--- debian ping statistics ---
 	1 packets transmitted, 1 packets received, 0% packet loss
 	round-trip min/avg/max = 20.1/20.1/20.1 ms
 
 -------------------------------
 
 =item poweroff
 
 Shuts down the system, and requests that the kernel turn off power upon halting.
 
 -------------------------------
 
 =item printf
 
 Usage: printf format [argument...]
 
 Formats and prints the given data in a manner similar to the C printf command.
 
 Example:
 
 	$ printf "Val=%d\n" 5
 	Val=5
 
 -------------------------------
 
 =item ps
 
 Usage: ps
 
 Report process status
 
 This version of ps accepts no options.
 
 Example:
 
 	$ ps
   PID  Uid      Gid State Command
     1 root     root     S init
     2 root     root     S [kflushd]
     3 root     root     S [kupdate]
     4 root     root     S [kpiod]
     5 root     root     S [kswapd]
   742 andersen andersen S [bash]
   743 andersen andersen S -bash
   745 root     root     S [getty]
  2990 andersen andersen R ps
 
 -------------------------------
 
 =item pwd
 
 Prints the full filename of the current working directory.
 
 Example:
 
 	$ pwd
 	/root
 
 -------------------------------
 
 =item reboot
 
 Instructs the kernel to reboot the system.
 
 -------------------------------
 
 =item rm
 
 Usage: rm [OPTION]... FILE...
 
 Remove (unlink) the FILE(s).  You may use '--' to 
 indicate that all following arguments are non-options.
 
 Options:
 
         -f              remove existing destinations, never prompt
         -r or -R        remove the contents of directories recursively
 
 Example:
 
 	$ rm -rf /tmp/foo
 
 -------------------------------
 
 =item rmdir
 
 Usage: rmdir [OPTION]... DIRECTORY...
 
 Remove the DIRECTORY(ies), if they are empty.
 
 Example:
 
 	# rmdir /tmp/foo
 
 -------------------------------
 
 =item rmmod
 
 Usage: rmmod [OPTION]... [MODULE]...
 
 Unloads the specified kernel modules from the kernel.
 
 Options:
 
         -a      Try to remove all unused kernel modules.
 
 Example:
 
 	$ rmmod tulip
 
 -------------------------------
 
 =item sed
 
 Usage: sed [B<-n>] B<-e> script [file...]
 
 Allowed sed scripts come in the following form:
 
 	'ADDR [!] COMMAND'
 
 	where address ADDR can be:
 	  NUMBER    Match specified line number
 	  $         Match last line
 	  /REGEXP/  Match specified regexp
 	  (! inverts the meaning of the match)
 
 	and COMMAND can be:
 	  s/regexp/replacement/[igp]
 		 which attempt to match regexp against the pattern space
 		 and if successful replaces the matched portion with replacement.
 
 	  aTEXT
 		 which appends TEXT after the pattern space
 
 Options:
 
 	-e      add the script to the commands to be executed
 	-n      suppress automatic printing of pattern space
 
 This version of sed matches full regular expresions.
 
 Example:
 
 	$ echo "foo" | sed -e 's/f[a-zA-Z]o/bar/g'
 	bar
 
 -------------------------------
 
 =item setkeycodes
 
 Usage: setkeycodes SCANCODE KEYCODE ...
 
 Set entries into the kernel's scancode-to-keycode map,
 allowing unusual keyboards to generate usable keycodes.
 
 SCANCODE may be either xx or e0xx (hexadecimal),
 and KEYCODE is given in decimal
 
 Example:
 
 	# setkeycodes e030 127
 
 -------------------------------
 
 =item sh
 
 Usage: sh
 
 lash -- the BusyBox LAme SHell (command interpreter)
 
 This command does not yet have proper documentation.  
 
 Use lash just as you would use any other shell.  It properly handles pipes,
 redirects, job control, can be used as the shell for scripts (#!/bin/sh), and
 has a sufficient set of builtins to do what is needed.  It does not (yet)
 support Bourne Shell syntax.  If you need things like "if-then-else", "while",
 and such, use ash or bash.  If you just need a very simple and extremely small
 shell, this will do the job.
 
 -------------------------------
 
 =item sfdisk
 
 Usage: sfdisk [options] device ...
 
 device: something like /dev/hda or /dev/sda
 
 useful options:
 
     -s [or --show-size]: list size of a partition
     -c [or --id]:        print or change partition Id
     -l [or --list]:      list partitions of each device
     -d [or --dump]:      idem, but in a format suitable for later input
     -i [or --increment]: number cylinders etc. from 1 instead of from 0
     -uS, -uB, -uC, -uM:  accept/report in units of sectors/blocks/cylinders/MB
     -T [or --list-types]:list the known partition types
     -D [or --DOS]:       for DOS-compatibility: waste a little space
     -R [or --re-read]:   make kernel reread partition table
     -N# :                change only the partition with number #
     -n :                 do not actually write to disk
     -O file :            save the sectors that will be overwritten to file
     -I file :            restore these sectors again
     -v [or --version]:   print version
     -? [or --help]:      print this message
 
 dangerous options:
 
     -g [or --show-geometry]: print the kernel's idea of the geometry
     -x [or --show-extended]: also list extended partitions on output
 
                              or expect descriptors for them on input
     -L  [or --Linux]:      do not complain about things irrelevant for Linux
     -q  [or --quiet]:      suppress warning messages
     You can override the detected geometry using:
     -C# [or --cylinders #]:set the number of cylinders to use
     -H# [or --heads #]:    set the number of heads to use
     -S# [or --sectors #]:  set the number of sectors to use
 
 You can disable all consistency checking with:
 
     -f  [or --force]:      do what I say, even if it is stupid
 
 -------------------------------
 
 =item sleep
 
 Usage: sleep N
 
 Pause for N seconds.
 
 Example:
 
 	$ sleep 2
 	[2 second delay results]
 
 -------------------------------
 
 =item sort
 
 Usage: sort [B<-n>] [B<-r>] [FILE]...
 
 Sorts lines of text in the specified files
 
 Example:
 
 	$ echo -e "e\nf\nb\nd\nc\na" | sort
 	a
 	b
 	c
 	d
 	e
 	f
 
 -------------------------------
 
 =item sync
 
 Usage: sync
 
 Write all buffered filesystem blocks to disk.
 
 -------------------------------
 
 =item syslogd
 
 Usage: syslogd [OPTION]...
 
 Linux system and kernel (provides klogd) logging utility.
 Note that this version of syslogd/klogd ignores /etc/syslog.conf.
 
 Options:
 
         -m      Change the mark timestamp interval. default=20min. 0=off
         -n      Do not fork into the background (for when run by init)
         -K      Do not start up the klogd process (by default syslogd spawns klogd).
         -O      Specify an alternate log file.  default=/var/log/messages
 
 -------------------------------
 
 =item swapon
 
 Usage: swapon [OPTION] [device]
 
 Start swapping virtual memory pages on the given device.
 
 Options:
 
         -a      Start swapping on all swap devices
 
 -------------------------------
 
 =item swapoff
 
 Usage: swapoff [OPTION] [device]
 
 Stop swapping virtual memory pages on the given device.
 
 Options:
 
         -a      Stop swapping on all swap devices
 
 -------------------------------
 
 =item tail
 
 Usage: tail [OPTION] [FILE]...
 
 Print last 10 lines of each FILE to standard output.
 With more than one FILE, precede each with a header giving the
 file name. With no FILE, or when FILE is -, read standard input.
 
 Options:
 
         -n NUM          Print last NUM lines instead of first 10
         -f              Output data as the file grows.  This version
                         of 'tail -f' supports only one file at a time.
 
 Example:
 
 	$ tail -n 1 /etc/resolv.conf
 	nameserver 10.0.0.1
 
 -------------------------------
 
 =item tar
 
 Usage: tar -[cxtvO] [B<--exclude> File] [B<-f> tarFile] [FILE] ...
 
 Create, extract, or list files from a tar file.  Note that
 this version of tar treats hard links as separate files.
 
 Main operation mode:
 
         c               create
         x               extract
         t               list
 
 File selection:
 
         f               name of tarfile or "-" for stdin
         O               extract to stdout
         --exclude       file to exclude
 
 Informative output:
 
         v               verbosely list files processed
 
 Example:
 
 	$ zcat /tmp/tarball.tar.gz | tar -xf -
 	$ tar -cf /tmp/tarball.tar /usr/local
 
 -------------------------------
 
 =item test, [
 
 Usage: test EXPRESSION
 or   [ EXPRESSION ]
 
 Checks file types and compares values returning an exit
 code determined by the value of EXPRESSION.
 
 Example:
 
 	$ test 1 -eq 2
 	$ echo $?
 	1
 	$ test 1 -eq 1
 	$ echo $?
 	0
 	$ [ -d /etc ]
 	$ echo $?
 	0
 	$ [ -d /junk ]
 	$ echo $?
 	1
 
 -------------------------------
 
 =item tee
 
 Usage: tee [OPTION]... [FILE]...
 
 Copy standard input to each FILE, and also to standard output.
 
 Options:
 
         -a      append to the given FILEs, do not overwrite
 
 Example:
 
 	$ echo "Hello" | tee /tmp/foo
 	$ cat /tmp/foo
 	Hello
 
 -------------------------------
 
 =item touch
 
 Usage: touch [B<-c>] file [file ...]
 
 Update the last-modified date on (or create) the selected file[s].
 
 Example:
 
 	$ ls -l /tmp/foo
 	/bin/ls: /tmp/foo: No such file or directory
 	$ touch /tmp/foo
 	$ ls -l /tmp/foo
 	-rw-rw-r--    1 andersen andersen        0 Apr 15 01:11 /tmp/foo
 
 -------------------------------
 
 =item tr
 
 Usage: tr [-cds] STRING1 [STRING2]
 
 Translate, squeeze, and/or delete characters from
 standard input, writing to standard output.
 
 Options:
 
 	-c      take complement of STRING1
 	-d      delete input characters coded STRING1
 	-s      squeeze multiple output characters of STRING2 into one character
 
 Example:
 
 	$ echo "gdkkn vnqkc" | tr [a-y] [b-z]
 	hello world
 
 -------------------------------
 
 =item true
 
 Returns an exit code of TRUE (0)
 
 Example:
 
 	$ true
 	$ echo $?
 	0
 
 -------------------------------
 
 =item tty
 
 Usage: tty
 
 Print the file name of the terminal connected to standard input.
 
 Options:
 
         -s      print nothing, only return an exit status
 
 Example:
 
 	$ tty
 	/dev/tty2
 
 -------------------------------
 
 =item umount
 
 Usage: umount [flags] filesystem|directory
 
 Flags:
 
 		-a:     Unmount all file systems
 		-r:     Try to remount devices as read-only if mount is busy
 		-f:     Force filesystem umount (i.e. unreachable NFS server)
 		-l:     Do not free loop device (if a loop device has been used)
 
 Example:
 
 	$ umount /dev/hdc1 
 
 -------------------------------
 
 =item uname
 
 Usage: uname [OPTION]...
 
 Print certain system information.  With no OPTION, same as B<-s>.
 
 Options:
 
         -a      print all information
         -m      the machine (hardware) type
         -n      print the machine's network node hostname
         -r      print the operating system release
         -s      print the operating system name
         -p      print the host processor type
         -v      print the operating system version
 
 Example:
 
 	$ uname -a
 	Linux debian 2.2.15pre13 #5 Tue Mar 14 16:03:50 MST 2000 i686 unknown
 
 -------------------------------
 
 =item uniq
 
 Usage: uniq [OPTION]... [INPUT [OUTPUT]]
 
 Discard all but one of successive identical lines from INPUT
 (or standard input), writing to OUTPUT (or standard output).
 
 Example:
 
 	$ echo -e "a\na\nb\nc\nc\na" | sort | uniq
 	a
 	b
 	c
 
 -------------------------------
 
 =item update
 
 Usage: update [options]
 
 Periodically flushes filesystem buffers.
 
 Options:
 
         -S      force use of sync(2) instead of flushing
         -s SECS call sync this often (default 30)
         -f SECS flush some buffers this often (default 5)
 
 -------------------------------
 
 =item uptime
 
 Usage: uptime
 
 Tells how long the system has been running since boot.
 
 Example:
 
 	$ uptime
 	  1:55pm  up  2:30, load average: 0.09, 0.04, 0.00
 
 -------------------------------
 
 =item usleep
 
 Usage: usleep N
 
 Pauses for N microseconds.
 
 Example:
 
 	$ usleep 1000000
 	[pauses for 1 second]
 
 -------------------------------
 
 =item wc
 
 Usage: wc [OPTION]... [FILE]...
 
 Print line, word, and byte counts for each FILE, and a total line if
 more than one FILE is specified.  With no FILE, read standard input.
 
 Options:
 
         -c      print the byte counts
         -l      print the newline counts
         -L      print the length of the longest line
         -w      print the word counts
 
 Example:
 
 	$ wc /etc/passwd
 	     31      46    1365 /etc/passwd
 
 -------------------------------
 
 =item whoami
 
 Usage: whoami
 
 Prints the user name associated with the current effective user id.
 
 Example:
 
 	$ whoami
 	andersen
 
 -------------------------------
 
 =item yes
 
 Usage: yes [OPTION]... [STRING]...
 
 Repeatedly outputs a line with all specified STRING(s), or `y'.
 
 -------------------------------
 
 =item zcat
 
 This is essentially an alias for invoking "gunzip B<-c>", where 
 it decompresses the file inquestion and send the output to stdout. 
 
 -------------------------------
 
 =back
 
 =head1 LIBC NSS
 
 GNU Libc uses the Name Service Switch (NSS) to configure the behavior of the C
 library for the local environment, and to configure how it reads system data,
 such as passwords and group information.  BusyBox has made it Policy that it
 will never use NSS, and will never use and libc calls that make use of NSS.
 This allows you to run an embedded system without the need for installing an
 /etc/nsswitch.conf file and without and /lib/libnss_* libraries installed.
 
 If you are using a system that is using a remote LDAP server for authentication
 via GNU libc NSS, and you want to use BusyBox, then you will need to adjust the
 BusyBox source.  Chances are though, that if you have enough space to install
 of that stuff on your system, then you probably want the full GNU utilities.
 
 =head1 SEE ALSO
 
 textutils(1), shellutils(1), etc...
 
 =head1 MAINTAINER
 
 Erik Andersen <andersee@debian.org> <andersen@lineo.com>
 
 =head1 AUTHORS
 
 The following people have contributed code to BusyBox whether
 they know it or not.
 
 Erik Andersen <andersee@debian.org>
 
 =for html <br>
 
 John Beppu <beppu@lineo.com>
 
 =for html <br>
 
 Brian Candler <B.Candler@pobox.com>
 
 =for html <br>
 
 Randolph Chung <tausq@debian.org>
 
 =for html <br>
 
 Dave Cinege <dcinege@psychosis.com>	
 
 =for html <br>
 
 Karl M. Hegbloom <karlheg@debian.org>
 
 =for html <br>
 
 John Lombardo <john@deltanet.com>	
 
 =for html <br>
 
 Glenn McGrath <bug1@netconnect.com.au>
 
 =for html <br>
 
 Bruce Perens <bruce@perens.com>
 
 =for html <br>
 
 Pavel Roskin <pavel_roskin@geocities.com>
 
 =for html <br>
 
 Linus Torvalds <torvalds@transmeta.com>
 
 =for html <br>
 
 Charles P. Wright <cpwright@villagenet.com>
 
 =for html <br>
 
 Enrique Zanardi <ezanardi@ull.es>
 
 =for html <br>
 
 =cut
 
-# $Id: busybox.pod,v 1.36 2000/06/07 17:28:53 andersen Exp $
+# $Id: busybox.pod,v 1.37 2000/06/07 20:38:15 proski Exp $
diff --git a/networking/ping.c b/networking/ping.c
index 14a56cd..0cfe062 100644
--- a/networking/ping.c
+++ b/networking/ping.c
@@ -1,511 +1,518 @@
 /* vi: set sw=4 ts=4: */
 /*
- * $Id: ping.c,v 1.15 2000/05/12 19:41:47 erik Exp $
+ * $Id: ping.c,v 1.16 2000/06/07 20:38:15 proski Exp $
  * Mini ping implementation for busybox
  *
  * Copyright (C) 1999 by Randolph Chung <tausq@debian.org>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  * General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  *
  * This version of ping is adapted from the ping in netkit-base 0.10,
  * which is:
  *
  * Copyright (c) 1989 The Regents of the University of California.
  * All rights reserved.
  *
  * This code is derived from software contributed to Berkeley by
  * Mike Muuss.
  * 
  * Original copyright notice is retained at the end of this file.
  */
 
 #include "internal.h"
 #include <sys/param.h>
 #include <sys/socket.h>
 #include <sys/file.h>
 #include <sys/time.h>
 #include <sys/times.h>
 #include <sys/signal.h>
 
 #include <netinet/in.h>
 #include <netinet/ip.h>
 #include <netinet/ip_icmp.h>
 #include <arpa/inet.h>
 #include <netdb.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <errno.h>
 
 #define DEFDATALEN      56
 #define	MAXIPLEN	60
 #define	MAXICMPLEN	76
 #define	MAXPACKET	65468
 #define	MAX_DUP_CHK	(8 * 128)
 #define MAXWAIT         10
 #define PINGINTERVAL    1		/* second */
 
 #define O_QUIET         (1 << 0)
 
 #define	A(bit)		rcvd_tbl[(bit)>>3]	/* identify byte in array */
 #define	B(bit)		(1 << ((bit) & 0x07))	/* identify bit in byte */
 #define	SET(bit)	(A(bit) |= B(bit))
 #define	CLR(bit)	(A(bit) &= (~B(bit)))
 #define	TST(bit)	(A(bit) & B(bit))
 
+static void ping(const char *host);
+
 /* common routines */
 static int in_cksum(unsigned short *buf, int sz)
 {
 	int nleft = sz;
 	int sum = 0;
 	unsigned short *w = buf;
 	unsigned short ans = 0;
 
 	while (nleft > 1) {
 		sum += *w++;
 		nleft -= 2;
 	}
 
 	if (nleft == 1) {
 		*(unsigned char *) (&ans) = *(unsigned char *) w;
 		sum += ans;
 	}
 
 	sum = (sum >> 16) + (sum & 0xFFFF);
 	sum += (sum >> 16);
 	ans = ~sum;
 	return (ans);
 }
 
 /* simple version */
 #ifdef BB_SIMPLE_PING
 static const char *ping_usage = "ping host\n"
 #ifndef BB_FEATURE_TRIVIAL_HELP
 	"\nSend ICMP ECHO_REQUEST packets to network hosts\n"
 #endif
 	;
 
 static char *hostname = NULL;
 
 static void noresp(int ign)
 {
 	printf("No response from %s\n", hostname);
 	exit(0);
 }
 
-static int ping(const char *host)
+static void ping(const char *host)
 {
 	struct hostent *h;
 	struct sockaddr_in pingaddr;
 	struct icmp *pkt;
 	int pingsock, c;
 	char packet[DEFDATALEN + MAXIPLEN + MAXICMPLEN];
 
 	if ((pingsock = socket(AF_INET, SOCK_RAW, 1)) < 0) {	/* 1 == ICMP */
-		perror("ping");
+		perror("ping: creating a raw socket");
 		exit(1);
 	}
 
 	/* drop root privs if running setuid */
 	setuid(getuid());
 
 	memset(&pingaddr, 0, sizeof(struct sockaddr_in));
 
 	pingaddr.sin_family = AF_INET;
 	if (!(h = gethostbyname(host))) {
 		fprintf(stderr, "ping: unknown host %s\n", host);
 		exit(1);
 	}
 	memcpy(&pingaddr.sin_addr, h->h_addr, sizeof(pingaddr.sin_addr));
 	hostname = h->h_name;
 
 	pkt = (struct icmp *) packet;
 	memset(pkt, 0, sizeof(packet));
 	pkt->icmp_type = ICMP_ECHO;
 	pkt->icmp_cksum = in_cksum((unsigned short *) pkt, sizeof(packet));
 
 	c = sendto(pingsock, packet, sizeof(packet), 0,
 			   (struct sockaddr *) &pingaddr, sizeof(struct sockaddr_in));
 
 	if (c < 0 || c != sizeof(packet)) {
 		if (c < 0)
-			perror("ping");
+			perror("ping: sendto");
 		fprintf(stderr, "ping: write incomplete\n");
 		exit(1);
 	}
 
 	signal(SIGALRM, noresp);
 	alarm(5);					/* give the host 5000ms to respond */
 	/* listen for replies */
 	while (1) {
 		struct sockaddr_in from;
 		size_t fromlen = sizeof(from);
 
 		if ((c = recvfrom(pingsock, packet, sizeof(packet), 0,
 						  (struct sockaddr *) &from, &fromlen)) < 0) {
 			if (errno == EINTR)
 				continue;
-			perror("ping");
+			perror("ping: recvfrom");
 			continue;
 		}
 		if (c >= 76) {			/* ip + icmp */
 			struct iphdr *iphdr = (struct iphdr *) packet;
 
 			pkt = (struct icmp *) (packet + (iphdr->ihl << 2));	/* skip ip hdr */
 			if (pkt->icmp_type == ICMP_ECHOREPLY)
 				break;
 		}
 	}
 	printf("%s is alive!\n", hostname);
-	return (TRUE);
+	return;
 }
 
 extern int ping_main(int argc, char **argv)
 {
 	argc--;
 	argv++;
 	if (argc < 1)
 		usage(ping_usage);
 	ping(*argv);
 	exit(TRUE);
 }
 
-#else
+#else /* ! BB_SIMPLE_PING */
 /* full(er) version */
 static const char *ping_usage = "ping [OPTION]... host\n"
 #ifndef BB_FEATURE_TRIVIAL_HELP
 	"\nSend ICMP ECHO_REQUEST packets to network hosts.\n\n"
 	"Options:\n"
 	"\t-c COUNT\tSend only COUNT pings.\n"
+	"\t-s SIZE\t\tSend SIZE data bytes in packets (default=56).\n"
 	"\t-q\t\tQuiet mode, only displays output at start\n"
 	"\t\t\tand when finished.\n"
 #endif
 	;
 
 static char *hostname = NULL;
 static struct sockaddr_in pingaddr;
 static int pingsock = -1;
+static int datalen = DEFDATALEN;
 
 static long ntransmitted = 0, nreceived = 0, nrepeats = 0, pingcount = 0;
 static int myid = 0, options = 0;
 static unsigned long tmin = ULONG_MAX, tmax = 0, tsum = 0;
 static char rcvd_tbl[MAX_DUP_CHK / 8];
 
 static void sendping(int);
 static void pingstats(int);
 static void unpack(char *, int, struct sockaddr_in *);
 
-static void ping(char *);
-
 /**************************************************************************/
 
 static void pingstats(int ign)
 {
 	signal(SIGINT, SIG_IGN);
 
 	printf("\n--- %s ping statistics ---\n", hostname);
 	printf("%ld packets transmitted, ", ntransmitted);
 	printf("%ld packets received, ", nreceived);
 	if (nrepeats)
 		printf("%ld duplicates, ", nrepeats);
 	if (ntransmitted)
 		printf("%ld%% packet loss\n",
 			   (ntransmitted - nreceived) * 100 / ntransmitted);
 	if (nreceived)
 		printf("round-trip min/avg/max = %lu.%lu/%lu.%lu/%lu.%lu ms\n",
 			   tmin / 10, tmin % 10,
 			   (tsum / (nreceived + nrepeats)) / 10,
 			   (tsum / (nreceived + nrepeats)) % 10, tmax / 10, tmax % 10);
 	exit(0);
 }
 
 static void sendping(int ign)
 {
 	struct icmp *pkt;
 	int i;
-	char packet[DEFDATALEN + 8];
+	char packet[datalen + 8];
 
 	pkt = (struct icmp *) packet;
 
 	pkt->icmp_type = ICMP_ECHO;
 	pkt->icmp_code = 0;
 	pkt->icmp_cksum = 0;
 	pkt->icmp_seq = ntransmitted++;
 	pkt->icmp_id = myid;
 	CLR(pkt->icmp_seq % MAX_DUP_CHK);
 
 	gettimeofday((struct timeval *) &packet[8], NULL);
 	pkt->icmp_cksum = in_cksum((unsigned short *) pkt, sizeof(packet));
 
 	i = sendto(pingsock, packet, sizeof(packet), 0,
 			   (struct sockaddr *) &pingaddr, sizeof(struct sockaddr_in));
 
-	if (i < 0 || i != sizeof(packet)) {
-		if (i < 0)
-			perror("ping");
-		fprintf(stderr, "ping wrote %d chars; %d expected\n", i,
-				(int)sizeof(packet));
-		exit(1);
-	}
+	if (i < 0)
+		fatalError("ping: sendto: %s\n", strerror(errno));
+	else if (i != sizeof(packet))
+		fatalError("ping wrote %d chars; %d expected\n", i,
+			   (int)sizeof(packet));
 
 	signal(SIGALRM, sendping);
 	if (pingcount == 0 || ntransmitted < pingcount) {	/* schedule next in 1s */
 		alarm(PINGINTERVAL);
 	} else {					/* done, wait for the last ping to come back */
 		/* todo, don't necessarily need to wait so long... */
 		signal(SIGALRM, pingstats);
 		alarm(MAXWAIT);
 	}
 }
 
 static char *icmp_type_name (int id)
 {
 	switch (id) {
 	case ICMP_ECHOREPLY: 		return "Echo Reply";
 	case ICMP_DEST_UNREACH: 	return "Destination Unreachable";
 	case ICMP_SOURCE_QUENCH: 	return "Source Quench";
 	case ICMP_REDIRECT: 		return "Redirect (change route)";
 	case ICMP_ECHO: 			return "Echo Request";
 	case ICMP_TIME_EXCEEDED: 	return "Time Exceeded";
 	case ICMP_PARAMETERPROB: 	return "Parameter Problem";
 	case ICMP_TIMESTAMP: 		return "Timestamp Request";
 	case ICMP_TIMESTAMPREPLY: 	return "Timestamp Reply";
 	case ICMP_INFO_REQUEST: 	return "Information Request";
 	case ICMP_INFO_REPLY: 		return "Information Reply";
 	case ICMP_ADDRESS: 			return "Address Mask Request";
 	case ICMP_ADDRESSREPLY: 	return "Address Mask Reply";
 	default: 					return "unknown ICMP type";
 	}
 }
 
 static void unpack(char *buf, int sz, struct sockaddr_in *from)
 {
 	struct icmp *icmppkt;
 	struct iphdr *iphdr;
 	struct timeval tv, *tp;
 	int hlen, dupflag;
 	unsigned long triptime;
 
 	gettimeofday(&tv, NULL);
 
 	/* check IP header */
 	iphdr = (struct iphdr *) buf;
 	hlen = iphdr->ihl << 2;
 	/* discard if too short */
-	if (sz < (DEFDATALEN + ICMP_MINLEN))
+	if (sz < (datalen + ICMP_MINLEN))
 		return;
 
 	sz -= hlen;
 	icmppkt = (struct icmp *) (buf + hlen);
 
 	if (icmppkt->icmp_id != myid)
 	    return;				/* not our ping */
 
 	if (icmppkt->icmp_type == ICMP_ECHOREPLY) {
 	    ++nreceived;
 		tp = (struct timeval *) icmppkt->icmp_data;
 
 		if ((tv.tv_usec -= tp->tv_usec) < 0) {
 			--tv.tv_sec;
 			tv.tv_usec += 1000000;
 		}
 		tv.tv_sec -= tp->tv_sec;
 
 		triptime = tv.tv_sec * 10000 + (tv.tv_usec / 100);
 		tsum += triptime;
 		if (triptime < tmin)
 			tmin = triptime;
 		if (triptime > tmax)
 			tmax = triptime;
 
 		if (TST(icmppkt->icmp_seq % MAX_DUP_CHK)) {
 			++nrepeats;
 			--nreceived;
 			dupflag = 1;
 		} else {
 			SET(icmppkt->icmp_seq % MAX_DUP_CHK);
 			dupflag = 0;
 		}
 
 		if (options & O_QUIET)
 			return;
 
 		printf("%d bytes from %s: icmp_seq=%u", sz,
 			   inet_ntoa(*(struct in_addr *) &from->sin_addr.s_addr),
 			   icmppkt->icmp_seq);
 		printf(" ttl=%d", iphdr->ttl);
 		printf(" time=%lu.%lu ms", triptime / 10, triptime % 10);
 		if (dupflag)
 			printf(" (DUP!)");
 		printf("\n");
 	} else 
 		if (icmppkt->icmp_type != ICMP_ECHO)
 			fprintf(stderr,
 					"Warning: Got ICMP %d (%s)\n",
 					icmppkt->icmp_type, icmp_type_name (icmppkt->icmp_type));
 }
 
-static void ping(char *host)
+static void ping(const char *host)
 {
 	struct protoent *proto;
 	struct hostent *h;
 	char buf[MAXHOSTNAMELEN];
-	char packet[DEFDATALEN + MAXIPLEN + MAXICMPLEN];
+	char packet[datalen + MAXIPLEN + MAXICMPLEN];
 	int sockopt;
 
 	proto = getprotobyname("icmp");
 	/* if getprotobyname failed, just silently force 
 	 * proto->p_proto to have the correct value for "icmp" */
 	if ((pingsock = socket(AF_INET, SOCK_RAW,
 						   (proto ? proto->p_proto : 1))) < 0) {	/* 1 == ICMP */
 		if (errno == EPERM) {
 			fprintf(stderr, "ping: permission denied. (are you root?)\n");
 		} else {
-			perror("ping");
+			perror("ping: creating a raw socket");
 		}
 		exit(1);
 	}
 
 	/* drop root privs if running setuid */
 	setuid(getuid());
 
 	memset(&pingaddr, 0, sizeof(struct sockaddr_in));
 
 	pingaddr.sin_family = AF_INET;
 	if (!(h = gethostbyname(host))) {
 		fprintf(stderr, "ping: unknown host %s\n", host);
 		exit(1);
 	}
 
 	if (h->h_addrtype != AF_INET) {
 		fprintf(stderr,
 				"ping: unknown address type; only AF_INET is currently supported.\n");
 		exit(1);
 	}
 
 	pingaddr.sin_family = AF_INET;	/* h->h_addrtype */
 	memcpy(&pingaddr.sin_addr, h->h_addr, sizeof(pingaddr.sin_addr));
 	strncpy(buf, h->h_name, sizeof(buf) - 1);
 	hostname = buf;
 
 	/* enable broadcast pings */
 	sockopt = 1;
 	setsockopt(pingsock, SOL_SOCKET, SO_BROADCAST, (char *) &sockopt,
 			   sizeof(sockopt));
 
 	/* set recv buf for broadcast pings */
 	sockopt = 48 * 1024;
 	setsockopt(pingsock, SOL_SOCKET, SO_RCVBUF, (char *) &sockopt,
 			   sizeof(sockopt));
 
 	printf("PING %s (%s): %d data bytes\n",
 		   hostname,
 		   inet_ntoa(*(struct in_addr *) &pingaddr.sin_addr.s_addr),
-		   DEFDATALEN);
+		   datalen);
 
 	signal(SIGINT, pingstats);
 
 	/* start the ping's going ... */
 	sendping(0);
 
 	/* listen for replies */
 	while (1) {
 		struct sockaddr_in from;
 		socklen_t fromlen = (socklen_t) sizeof(from);
 		int c;
 
 		if ((c = recvfrom(pingsock, packet, sizeof(packet), 0,
 						  (struct sockaddr *) &from, &fromlen)) < 0) {
 			if (errno == EINTR)
 				continue;
-			perror("ping");
+			perror("ping: recvfrom");
 			continue;
 		}
 		unpack(packet, c, &from);
 		if (pingcount > 0 && nreceived >= pingcount)
 			break;
 	}
 	pingstats(0);
 }
 
 extern int ping_main(int argc, char **argv)
 {
 	char *thisarg;
 
 	argc--;
 	argv++;
 	options = 0;
 	/* Parse any options */
 	while (argc >= 1 && **argv == '-') {
 		thisarg = *argv;
 		thisarg++;
 		switch (*thisarg) {
 		case 'q':
 			options |= O_QUIET;
 			break;
 		case 'c':
-			argc--;
+			if (--argc <= 0)
+			        usage(ping_usage);
 			argv++;
 			pingcount = atoi(*argv);
 			break;
+		case 's':
+			if (--argc <= 0)
+			        usage(ping_usage);
+			argv++;
+			datalen = atoi(*argv);
+			break;
 		default:
 			usage(ping_usage);
 		}
 		argc--;
 		argv++;
 	}
 	if (argc < 1)
 		usage(ping_usage);
 
 	myid = getpid() & 0xFFFF;
 	ping(*argv);
 	exit(TRUE);
 }
-#endif
+#endif /* ! BB_SIMPLE_PING */
 
 /*
  * Copyright (c) 1989 The Regents of the University of California.
  * All rights reserved.
  *
  * This code is derived from software contributed to Berkeley by
  * Mike Muuss.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in the
  *    documentation and/or other materials provided with the distribution.
  * 3. All advertising materials mentioning features or use of this software
  *    must display the following acknowledgement:
  *	This product includes software developed by the University of
  *	California, Berkeley and its contributors.
  * 4. Neither the name of the University nor the names of its contributors
  *    may be used to endorse or promote products derived from this software
  *    without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  */
diff --git a/ping.c b/ping.c
index 14a56cd..0cfe062 100644
--- a/ping.c
+++ b/ping.c
@@ -1,511 +1,518 @@
 /* vi: set sw=4 ts=4: */
 /*
- * $Id: ping.c,v 1.15 2000/05/12 19:41:47 erik Exp $
+ * $Id: ping.c,v 1.16 2000/06/07 20:38:15 proski Exp $
  * Mini ping implementation for busybox
  *
  * Copyright (C) 1999 by Randolph Chung <tausq@debian.org>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  * General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  *
  * This version of ping is adapted from the ping in netkit-base 0.10,
  * which is:
  *
  * Copyright (c) 1989 The Regents of the University of California.
  * All rights reserved.
  *
  * This code is derived from software contributed to Berkeley by
  * Mike Muuss.
  * 
  * Original copyright notice is retained at the end of this file.
  */
 
 #include "internal.h"
 #include <sys/param.h>
 #include <sys/socket.h>
 #include <sys/file.h>
 #include <sys/time.h>
 #include <sys/times.h>
 #include <sys/signal.h>
 
 #include <netinet/in.h>
 #include <netinet/ip.h>
 #include <netinet/ip_icmp.h>
 #include <arpa/inet.h>
 #include <netdb.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <errno.h>
 
 #define DEFDATALEN      56
 #define	MAXIPLEN	60
 #define	MAXICMPLEN	76
 #define	MAXPACKET	65468
 #define	MAX_DUP_CHK	(8 * 128)
 #define MAXWAIT         10
 #define PINGINTERVAL    1		/* second */
 
 #define O_QUIET         (1 << 0)
 
 #define	A(bit)		rcvd_tbl[(bit)>>3]	/* identify byte in array */
 #define	B(bit)		(1 << ((bit) & 0x07))	/* identify bit in byte */
 #define	SET(bit)	(A(bit) |= B(bit))
 #define	CLR(bit)	(A(bit) &= (~B(bit)))
 #define	TST(bit)	(A(bit) & B(bit))
 
+static void ping(const char *host);
+
 /* common routines */
 static int in_cksum(unsigned short *buf, int sz)
 {
 	int nleft = sz;
 	int sum = 0;
 	unsigned short *w = buf;
 	unsigned short ans = 0;
 
 	while (nleft > 1) {
 		sum += *w++;
 		nleft -= 2;
 	}
 
 	if (nleft == 1) {
 		*(unsigned char *) (&ans) = *(unsigned char *) w;
 		sum += ans;
 	}
 
 	sum = (sum >> 16) + (sum & 0xFFFF);
 	sum += (sum >> 16);
 	ans = ~sum;
 	return (ans);
 }
 
 /* simple version */
 #ifdef BB_SIMPLE_PING
 static const char *ping_usage = "ping host\n"
 #ifndef BB_FEATURE_TRIVIAL_HELP
 	"\nSend ICMP ECHO_REQUEST packets to network hosts\n"
 #endif
 	;
 
 static char *hostname = NULL;
 
 static void noresp(int ign)
 {
 	printf("No response from %s\n", hostname);
 	exit(0);
 }
 
-static int ping(const char *host)
+static void ping(const char *host)
 {
 	struct hostent *h;
 	struct sockaddr_in pingaddr;
 	struct icmp *pkt;
 	int pingsock, c;
 	char packet[DEFDATALEN + MAXIPLEN + MAXICMPLEN];
 
 	if ((pingsock = socket(AF_INET, SOCK_RAW, 1)) < 0) {	/* 1 == ICMP */
-		perror("ping");
+		perror("ping: creating a raw socket");
 		exit(1);
 	}
 
 	/* drop root privs if running setuid */
 	setuid(getuid());
 
 	memset(&pingaddr, 0, sizeof(struct sockaddr_in));
 
 	pingaddr.sin_family = AF_INET;
 	if (!(h = gethostbyname(host))) {
 		fprintf(stderr, "ping: unknown host %s\n", host);
 		exit(1);
 	}
 	memcpy(&pingaddr.sin_addr, h->h_addr, sizeof(pingaddr.sin_addr));
 	hostname = h->h_name;
 
 	pkt = (struct icmp *) packet;
 	memset(pkt, 0, sizeof(packet));
 	pkt->icmp_type = ICMP_ECHO;
 	pkt->icmp_cksum = in_cksum((unsigned short *) pkt, sizeof(packet));
 
 	c = sendto(pingsock, packet, sizeof(packet), 0,
 			   (struct sockaddr *) &pingaddr, sizeof(struct sockaddr_in));
 
 	if (c < 0 || c != sizeof(packet)) {
 		if (c < 0)
-			perror("ping");
+			perror("ping: sendto");
 		fprintf(stderr, "ping: write incomplete\n");
 		exit(1);
 	}
 
 	signal(SIGALRM, noresp);
 	alarm(5);					/* give the host 5000ms to respond */
 	/* listen for replies */
 	while (1) {
 		struct sockaddr_in from;
 		size_t fromlen = sizeof(from);
 
 		if ((c = recvfrom(pingsock, packet, sizeof(packet), 0,
 						  (struct sockaddr *) &from, &fromlen)) < 0) {
 			if (errno == EINTR)
 				continue;
-			perror("ping");
+			perror("ping: recvfrom");
 			continue;
 		}
 		if (c >= 76) {			/* ip + icmp */
 			struct iphdr *iphdr = (struct iphdr *) packet;
 
 			pkt = (struct icmp *) (packet + (iphdr->ihl << 2));	/* skip ip hdr */
 			if (pkt->icmp_type == ICMP_ECHOREPLY)
 				break;
 		}
 	}
 	printf("%s is alive!\n", hostname);
-	return (TRUE);
+	return;
 }
 
 extern int ping_main(int argc, char **argv)
 {
 	argc--;
 	argv++;
 	if (argc < 1)
 		usage(ping_usage);
 	ping(*argv);
 	exit(TRUE);
 }
 
-#else
+#else /* ! BB_SIMPLE_PING */
 /* full(er) version */
 static const char *ping_usage = "ping [OPTION]... host\n"
 #ifndef BB_FEATURE_TRIVIAL_HELP
 	"\nSend ICMP ECHO_REQUEST packets to network hosts.\n\n"
 	"Options:\n"
 	"\t-c COUNT\tSend only COUNT pings.\n"
+	"\t-s SIZE\t\tSend SIZE data bytes in packets (default=56).\n"
 	"\t-q\t\tQuiet mode, only displays output at start\n"
 	"\t\t\tand when finished.\n"
 #endif
 	;
 
 static char *hostname = NULL;
 static struct sockaddr_in pingaddr;
 static int pingsock = -1;
+static int datalen = DEFDATALEN;
 
 static long ntransmitted = 0, nreceived = 0, nrepeats = 0, pingcount = 0;
 static int myid = 0, options = 0;
 static unsigned long tmin = ULONG_MAX, tmax = 0, tsum = 0;
 static char rcvd_tbl[MAX_DUP_CHK / 8];
 
 static void sendping(int);
 static void pingstats(int);
 static void unpack(char *, int, struct sockaddr_in *);
 
-static void ping(char *);
-
 /**************************************************************************/
 
 static void pingstats(int ign)
 {
 	signal(SIGINT, SIG_IGN);
 
 	printf("\n--- %s ping statistics ---\n", hostname);
 	printf("%ld packets transmitted, ", ntransmitted);
 	printf("%ld packets received, ", nreceived);
 	if (nrepeats)
 		printf("%ld duplicates, ", nrepeats);
 	if (ntransmitted)
 		printf("%ld%% packet loss\n",
 			   (ntransmitted - nreceived) * 100 / ntransmitted);
 	if (nreceived)
 		printf("round-trip min/avg/max = %lu.%lu/%lu.%lu/%lu.%lu ms\n",
 			   tmin / 10, tmin % 10,
 			   (tsum / (nreceived + nrepeats)) / 10,
 			   (tsum / (nreceived + nrepeats)) % 10, tmax / 10, tmax % 10);
 	exit(0);
 }
 
 static void sendping(int ign)
 {
 	struct icmp *pkt;
 	int i;
-	char packet[DEFDATALEN + 8];
+	char packet[datalen + 8];
 
 	pkt = (struct icmp *) packet;
 
 	pkt->icmp_type = ICMP_ECHO;
 	pkt->icmp_code = 0;
 	pkt->icmp_cksum = 0;
 	pkt->icmp_seq = ntransmitted++;
 	pkt->icmp_id = myid;
 	CLR(pkt->icmp_seq % MAX_DUP_CHK);
 
 	gettimeofday((struct timeval *) &packet[8], NULL);
 	pkt->icmp_cksum = in_cksum((unsigned short *) pkt, sizeof(packet));
 
 	i = sendto(pingsock, packet, sizeof(packet), 0,
 			   (struct sockaddr *) &pingaddr, sizeof(struct sockaddr_in));
 
-	if (i < 0 || i != sizeof(packet)) {
-		if (i < 0)
-			perror("ping");
-		fprintf(stderr, "ping wrote %d chars; %d expected\n", i,
-				(int)sizeof(packet));
-		exit(1);
-	}
+	if (i < 0)
+		fatalError("ping: sendto: %s\n", strerror(errno));
+	else if (i != sizeof(packet))
+		fatalError("ping wrote %d chars; %d expected\n", i,
+			   (int)sizeof(packet));
 
 	signal(SIGALRM, sendping);
 	if (pingcount == 0 || ntransmitted < pingcount) {	/* schedule next in 1s */
 		alarm(PINGINTERVAL);
 	} else {					/* done, wait for the last ping to come back */
 		/* todo, don't necessarily need to wait so long... */
 		signal(SIGALRM, pingstats);
 		alarm(MAXWAIT);
 	}
 }
 
 static char *icmp_type_name (int id)
 {
 	switch (id) {
 	case ICMP_ECHOREPLY: 		return "Echo Reply";
 	case ICMP_DEST_UNREACH: 	return "Destination Unreachable";
 	case ICMP_SOURCE_QUENCH: 	return "Source Quench";
 	case ICMP_REDIRECT: 		return "Redirect (change route)";
 	case ICMP_ECHO: 			return "Echo Request";
 	case ICMP_TIME_EXCEEDED: 	return "Time Exceeded";
 	case ICMP_PARAMETERPROB: 	return "Parameter Problem";
 	case ICMP_TIMESTAMP: 		return "Timestamp Request";
 	case ICMP_TIMESTAMPREPLY: 	return "Timestamp Reply";
 	case ICMP_INFO_REQUEST: 	return "Information Request";
 	case ICMP_INFO_REPLY: 		return "Information Reply";
 	case ICMP_ADDRESS: 			return "Address Mask Request";
 	case ICMP_ADDRESSREPLY: 	return "Address Mask Reply";
 	default: 					return "unknown ICMP type";
 	}
 }
 
 static void unpack(char *buf, int sz, struct sockaddr_in *from)
 {
 	struct icmp *icmppkt;
 	struct iphdr *iphdr;
 	struct timeval tv, *tp;
 	int hlen, dupflag;
 	unsigned long triptime;
 
 	gettimeofday(&tv, NULL);
 
 	/* check IP header */
 	iphdr = (struct iphdr *) buf;
 	hlen = iphdr->ihl << 2;
 	/* discard if too short */
-	if (sz < (DEFDATALEN + ICMP_MINLEN))
+	if (sz < (datalen + ICMP_MINLEN))
 		return;
 
 	sz -= hlen;
 	icmppkt = (struct icmp *) (buf + hlen);
 
 	if (icmppkt->icmp_id != myid)
 	    return;				/* not our ping */
 
 	if (icmppkt->icmp_type == ICMP_ECHOREPLY) {
 	    ++nreceived;
 		tp = (struct timeval *) icmppkt->icmp_data;
 
 		if ((tv.tv_usec -= tp->tv_usec) < 0) {
 			--tv.tv_sec;
 			tv.tv_usec += 1000000;
 		}
 		tv.tv_sec -= tp->tv_sec;
 
 		triptime = tv.tv_sec * 10000 + (tv.tv_usec / 100);
 		tsum += triptime;
 		if (triptime < tmin)
 			tmin = triptime;
 		if (triptime > tmax)
 			tmax = triptime;
 
 		if (TST(icmppkt->icmp_seq % MAX_DUP_CHK)) {
 			++nrepeats;
 			--nreceived;
 			dupflag = 1;
 		} else {
 			SET(icmppkt->icmp_seq % MAX_DUP_CHK);
 			dupflag = 0;
 		}
 
 		if (options & O_QUIET)
 			return;
 
 		printf("%d bytes from %s: icmp_seq=%u", sz,
 			   inet_ntoa(*(struct in_addr *) &from->sin_addr.s_addr),
 			   icmppkt->icmp_seq);
 		printf(" ttl=%d", iphdr->ttl);
 		printf(" time=%lu.%lu ms", triptime / 10, triptime % 10);
 		if (dupflag)
 			printf(" (DUP!)");
 		printf("\n");
 	} else 
 		if (icmppkt->icmp_type != ICMP_ECHO)
 			fprintf(stderr,
 					"Warning: Got ICMP %d (%s)\n",
 					icmppkt->icmp_type, icmp_type_name (icmppkt->icmp_type));
 }
 
-static void ping(char *host)
+static void ping(const char *host)
 {
 	struct protoent *proto;
 	struct hostent *h;
 	char buf[MAXHOSTNAMELEN];
-	char packet[DEFDATALEN + MAXIPLEN + MAXICMPLEN];
+	char packet[datalen + MAXIPLEN + MAXICMPLEN];
 	int sockopt;
 
 	proto = getprotobyname("icmp");
 	/* if getprotobyname failed, just silently force 
 	 * proto->p_proto to have the correct value for "icmp" */
 	if ((pingsock = socket(AF_INET, SOCK_RAW,
 						   (proto ? proto->p_proto : 1))) < 0) {	/* 1 == ICMP */
 		if (errno == EPERM) {
 			fprintf(stderr, "ping: permission denied. (are you root?)\n");
 		} else {
-			perror("ping");
+			perror("ping: creating a raw socket");
 		}
 		exit(1);
 	}
 
 	/* drop root privs if running setuid */
 	setuid(getuid());
 
 	memset(&pingaddr, 0, sizeof(struct sockaddr_in));
 
 	pingaddr.sin_family = AF_INET;
 	if (!(h = gethostbyname(host))) {
 		fprintf(stderr, "ping: unknown host %s\n", host);
 		exit(1);
 	}
 
 	if (h->h_addrtype != AF_INET) {
 		fprintf(stderr,
 				"ping: unknown address type; only AF_INET is currently supported.\n");
 		exit(1);
 	}
 
 	pingaddr.sin_family = AF_INET;	/* h->h_addrtype */
 	memcpy(&pingaddr.sin_addr, h->h_addr, sizeof(pingaddr.sin_addr));
 	strncpy(buf, h->h_name, sizeof(buf) - 1);
 	hostname = buf;
 
 	/* enable broadcast pings */
 	sockopt = 1;
 	setsockopt(pingsock, SOL_SOCKET, SO_BROADCAST, (char *) &sockopt,
 			   sizeof(sockopt));
 
 	/* set recv buf for broadcast pings */
 	sockopt = 48 * 1024;
 	setsockopt(pingsock, SOL_SOCKET, SO_RCVBUF, (char *) &sockopt,
 			   sizeof(sockopt));
 
 	printf("PING %s (%s): %d data bytes\n",
 		   hostname,
 		   inet_ntoa(*(struct in_addr *) &pingaddr.sin_addr.s_addr),
-		   DEFDATALEN);
+		   datalen);
 
 	signal(SIGINT, pingstats);
 
 	/* start the ping's going ... */
 	sendping(0);
 
 	/* listen for replies */
 	while (1) {
 		struct sockaddr_in from;
 		socklen_t fromlen = (socklen_t) sizeof(from);
 		int c;
 
 		if ((c = recvfrom(pingsock, packet, sizeof(packet), 0,
 						  (struct sockaddr *) &from, &fromlen)) < 0) {
 			if (errno == EINTR)
 				continue;
-			perror("ping");
+			perror("ping: recvfrom");
 			continue;
 		}
 		unpack(packet, c, &from);
 		if (pingcount > 0 && nreceived >= pingcount)
 			break;
 	}
 	pingstats(0);
 }
 
 extern int ping_main(int argc, char **argv)
 {
 	char *thisarg;
 
 	argc--;
 	argv++;
 	options = 0;
 	/* Parse any options */
 	while (argc >= 1 && **argv == '-') {
 		thisarg = *argv;
 		thisarg++;
 		switch (*thisarg) {
 		case 'q':
 			options |= O_QUIET;
 			break;
 		case 'c':
-			argc--;
+			if (--argc <= 0)
+			        usage(ping_usage);
 			argv++;
 			pingcount = atoi(*argv);
 			break;
+		case 's':
+			if (--argc <= 0)
+			        usage(ping_usage);
+			argv++;
+			datalen = atoi(*argv);
+			break;
 		default:
 			usage(ping_usage);
 		}
 		argc--;
 		argv++;
 	}
 	if (argc < 1)
 		usage(ping_usage);
 
 	myid = getpid() & 0xFFFF;
 	ping(*argv);
 	exit(TRUE);
 }
-#endif
+#endif /* ! BB_SIMPLE_PING */
 
 /*
  * Copyright (c) 1989 The Regents of the University of California.
  * All rights reserved.
  *
  * This code is derived from software contributed to Berkeley by
  * Mike Muuss.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in the
  *    documentation and/or other materials provided with the distribution.
  * 3. All advertising materials mentioning features or use of this software
  *    must display the following acknowledgement:
  *	This product includes software developed by the University of
  *	California, Berkeley and its contributors.
  * 4. Neither the name of the University nor the names of its contributors
  *    may be used to endorse or promote products derived from this software
  *    without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  */
